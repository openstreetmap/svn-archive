#ifndef _PROJECTIONS_AITOFF_HPP
#define _PROJECTIONS_AITOFF_HPP

// Generic Geometry Library - projections (based on PROJ4)
// This file is automatically generated. DO NOT EDIT.

// Copyright Barend Gehrels (1995-2009), Geodan Holding B.V. Amsterdam, the Netherlands.
// Copyright Bruno Lalande (2008-2009)
// Use, modification and distribution is subject to the Boost Software License,
// Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

// This file is converted from PROJ4, http://trac.osgeo.org/proj
// PROJ4 is originally written by Gerald Evenden (then of the USGS)
// PROJ4 is maintained by Frank Warmerdam
// PROJ4 is converted to Geometry Library by Barend Gehrels (Geodan, Amsterdam)

// Original copyright notice:

// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
// THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include <geometry/projections/impl/base_static.hpp>
#include <geometry/projections/impl/base_dynamic.hpp>
#include <geometry/projections/impl/projects.hpp>
#include <geometry/projections/impl/factory_entry.hpp>

namespace projection
{
	#ifndef DOXYGEN_NO_IMPL
	namespace impl
	{
		namespace aitoff
		{

			struct par_aitoff
			{
				double cosphi1;
				int  mode;
			};





			// template class, using CRTP to implement forward/inverse
			template <typename LL, typename XY, typename PAR>
			struct base_aitoff_spheroid : public base_t_f<base_aitoff_spheroid<LL, XY, PAR>, LL, XY, PAR>
			{

				typedef typename base_t_f<base_aitoff_spheroid<LL, XY, PAR>, LL, XY, PAR>::LL_T LL_T;
				typedef typename base_t_f<base_aitoff_spheroid<LL, XY, PAR>, LL, XY, PAR>::XY_T XY_T;

				par_aitoff m_proj_parm;

				inline base_aitoff_spheroid(const PAR& par)
					: base_t_f<base_aitoff_spheroid<LL, XY, PAR>, LL, XY, PAR>(*this, par) {}

				inline void fwd(LL_T& lp_lon, LL_T& lp_lat, XY_T& xy_x, XY_T& xy_y) const
				{
					double c, d;

					if((d = acos(cos(lp_lat) * cos(c = 0.5 * lp_lon)))) {/* basic Aitoff */
						xy_x = 2. * d * cos(lp_lat) * sin(c) * (xy_y = 1. / sin(d));
						xy_y *= d * sin(lp_lat);
					} else
						xy_x = xy_y = 0.;
					if (this->m_proj_parm.mode) { /* Winkel Tripel */
						xy_x = (xy_x + lp_lon * this->m_proj_parm.cosphi1) * 0.5;
						xy_y = (xy_y + lp_lat) * 0.5;
					}
				}
			};

			template <typename PAR>
			void setup(PAR& par, par_aitoff& /*proj_parm*/)
			{
				// par.inv = 0;
				// par.fwd = s_forward;
				par.es = 0.;
			}


			// Aitoff
			template <typename PAR>
			void setup_aitoff(PAR& par, par_aitoff& proj_parm)
			{
				proj_parm.mode = 0;
				setup(par, proj_parm);
			}

			// Winkel Tripel
			template <typename PAR>
			void setup_wintri(PAR& par, par_aitoff& proj_parm)
			{
				proj_parm.mode = 1;
				if (pj_param(par.params, "tlat_1").i)
			        {
					if ((proj_parm.cosphi1 = cos(pj_param(par.params, "rlat_1").f)) == 0.)
						throw proj_exception(-22);
			        }
				else /* 50d28' or acos(2/pi) */
					proj_parm.cosphi1 = 0.636619772367581343;
				setup(par, proj_parm);
			}

		} // namespace aitoff
	} //namespaces impl
	#endif // doxygen

	/*!
		\brief Aitoff projection
		\ingroup projections
		\tparam LL latlong point type
		\tparam XY xy point type
		\tparam PAR parameter type
		\par Projection characteristics
		 - Miscellaneous
		 - Spheroid
		\par Example
		\image html ex_aitoff.gif
	*/
	template <typename LL, typename XY, typename PAR = parameters>
	struct aitoff_spheroid : public impl::aitoff::base_aitoff_spheroid<LL, XY, PAR>
	{
		inline aitoff_spheroid(const PAR& par) : impl::aitoff::base_aitoff_spheroid<LL, XY, PAR>(par)
		{
			impl::aitoff::setup_aitoff(this->m_par, this->m_proj_parm);
		}
	};

	/*!
		\brief Winkel Tripel projection
		\ingroup projections
		\tparam LL latlong point type
		\tparam XY xy point type
		\tparam PAR parameter type
		\par Projection characteristics
		 - Miscellaneous
		 - Spheroid
		 - lat_1
		\par Example
		\image html ex_wintri.gif
	*/
	template <typename LL, typename XY, typename PAR = parameters>
	struct wintri_spheroid : public impl::aitoff::base_aitoff_spheroid<LL, XY, PAR>
	{
		inline wintri_spheroid(const PAR& par) : impl::aitoff::base_aitoff_spheroid<LL, XY, PAR>(par)
		{
			impl::aitoff::setup_wintri(this->m_par, this->m_proj_parm);
		}
	};

	#ifndef DOXYGEN_NO_IMPL
	namespace impl
	{

		// Factory entry(s)
		template <typename LL, typename XY, typename PAR>
		class aitoff_entry : public impl::factory_entry<LL, XY, PAR>
		{
			public :
				virtual projection<LL, XY>* create_new(const PAR& par) const
				{
					return new base_v_f<aitoff_spheroid<LL, XY, PAR>, LL, XY, PAR>(par);
				}
		};

		template <typename LL, typename XY, typename PAR>
		class wintri_entry : public impl::factory_entry<LL, XY, PAR>
		{
			public :
				virtual projection<LL, XY>* create_new(const PAR& par) const
				{
					return new base_v_f<wintri_spheroid<LL, XY, PAR>, LL, XY, PAR>(par);
				}
		};

		template <typename LL, typename XY, typename PAR>
		inline void aitoff_init(impl::base_factory<LL, XY, PAR>& factory)
		{
			factory.add_to_factory("aitoff", new aitoff_entry<LL, XY, PAR>);
			factory.add_to_factory("wintri", new wintri_entry<LL, XY, PAR>);
		}

	} // namespace impl
	#endif // doxygen

}

#endif // _PROJECTIONS_AITOFF_HPP


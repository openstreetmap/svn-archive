#ifndef _PROJECTIONS_GN_SINU_HPP
#define _PROJECTIONS_GN_SINU_HPP

// Generic Geometry Library - projections (based on PROJ4)
// This file is automatically generated. DO NOT EDIT.

// Copyright Barend Gehrels (1995-2009), Geodan Holding B.V. Amsterdam, the Netherlands.
// Copyright Bruno Lalande (2008-2009)
// Use, modification and distribution is subject to the Boost Software License,
// Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

// This file is converted from PROJ4, http://trac.osgeo.org/proj
// PROJ4 is originally written by Gerald Evenden (then of the USGS)
// PROJ4 is maintained by Frank Warmerdam
// PROJ4 is converted to Geometry Library by Barend Gehrels (Geodan, Amsterdam)

// Original copyright notice:

// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
// THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include <geometry/projections/impl/base_static.hpp>
#include <geometry/projections/impl/base_dynamic.hpp>
#include <geometry/projections/impl/projects.hpp>
#include <geometry/projections/impl/factory_entry.hpp>
#include <geometry/projections/impl/pj_mlfn.hpp>

namespace projection
{
	#ifndef DOXYGEN_NO_IMPL
	namespace impl
	{
		namespace gn_sinu
		{
			static const double EPS10 = 1e-10;
			static const int MAX_ITER = 8;
			static const double LOOP_TOL = 1e-7;

			struct par_gn_sinu
			{
				double en[EN_SIZE];
				double m, n, C_x, C_y;
			};
			/* Ellipsoidal Sinusoidal only */

			// template class, using CRTP to implement forward/inverse
			template <typename LL, typename XY, typename PAR>
			struct base_gn_sinu_ellipsoid : public base_t_fi<base_gn_sinu_ellipsoid<LL, XY, PAR>, LL, XY, PAR>
			{

				typedef typename base_t_fi<base_gn_sinu_ellipsoid<LL, XY, PAR>, LL, XY, PAR>::LL_T LL_T;
				typedef typename base_t_fi<base_gn_sinu_ellipsoid<LL, XY, PAR>, LL, XY, PAR>::XY_T XY_T;

				par_gn_sinu m_proj_parm;

				inline base_gn_sinu_ellipsoid(const PAR& par)
					: base_t_fi<base_gn_sinu_ellipsoid<LL, XY, PAR>, LL, XY, PAR>(*this, par) {}

				inline void fwd(LL_T& lp_lon, LL_T& lp_lat, XY_T& xy_x, XY_T& xy_y) const
				{
					double s, c;

					xy_y = pj_mlfn(lp_lat, s = sin(lp_lat), c = cos(lp_lat), this->m_proj_parm.en);
					xy_x = lp_lon * c / sqrt(1. - this->m_par.es * s * s);
				}

				inline void inv(XY_T& xy_x, XY_T& xy_y, LL_T& lp_lon, LL_T& lp_lat) const
				{
					double s;

					if ((s = fabs(lp_lat = pj_inv_mlfn(xy_y, this->m_par.es, this->m_proj_parm.en))) < HALFPI) {
						s = sin(lp_lat);
						lp_lon = xy_x * sqrt(1. - this->m_par.es * s * s) / cos(lp_lat);
					} else if ((s - EPS10) < HALFPI)
						lp_lon = 0.;
					else throw proj_exception();;
							return;
				}
				/* General spherical sinusoidals */
			};

			// template class, using CRTP to implement forward/inverse
			template <typename LL, typename XY, typename PAR>
			struct base_gn_sinu_spheroid : public base_t_fi<base_gn_sinu_spheroid<LL, XY, PAR>, LL, XY, PAR>
			{

				typedef typename base_t_fi<base_gn_sinu_spheroid<LL, XY, PAR>, LL, XY, PAR>::LL_T LL_T;
				typedef typename base_t_fi<base_gn_sinu_spheroid<LL, XY, PAR>, LL, XY, PAR>::XY_T XY_T;

				par_gn_sinu m_proj_parm;

				inline base_gn_sinu_spheroid(const PAR& par)
					: base_t_fi<base_gn_sinu_spheroid<LL, XY, PAR>, LL, XY, PAR>(*this, par) {}

				inline void fwd(LL_T& lp_lon, LL_T& lp_lat, XY_T& xy_x, XY_T& xy_y) const
				{
					if (!this->m_proj_parm.m)
						lp_lat = this->m_proj_parm.n != 1. ? aasin(this->m_proj_parm.n * sin(lp_lat)): lp_lat;
					else {
						double k, V;
						int i;

						k = this->m_proj_parm.n * sin(lp_lat);
						for (i = MAX_ITER; i ; --i) {
							lp_lat -= V = (this->m_proj_parm.m * lp_lat + sin(lp_lat) - k) /
								(this->m_proj_parm.m + cos(lp_lat));
							if (fabs(V) < LOOP_TOL)
								break;
						}
						if (!i)
							throw proj_exception();
					}
					xy_x = this->m_proj_parm.C_x * lp_lon * (this->m_proj_parm.m + cos(lp_lat));
					xy_y = this->m_proj_parm.C_y * lp_lat;
				}

				inline void inv(XY_T& xy_x, XY_T& xy_y, LL_T& lp_lon, LL_T& lp_lat) const
				{
					xy_y /= this->m_proj_parm.C_y;
					lp_lat = this->m_proj_parm.m ? aasin((this->m_proj_parm.m * xy_y + sin(xy_y)) / this->m_proj_parm.n) :
						( this->m_proj_parm.n != 1. ? aasin(sin(xy_y) / this->m_proj_parm.n) : xy_y );
					lp_lon = xy_x / (this->m_proj_parm.C_x * (this->m_proj_parm.m + cos(xy_y)));
				}
			};

			template <typename PAR>
			void setup(PAR& par, par_gn_sinu& proj_parm)
			{
				par.es = 0;
				proj_parm.C_x = (proj_parm.C_y = sqrt((proj_parm.m + 1.) / proj_parm.n))/(proj_parm.m + 1.);
				// par.inv = s_inverse;
				// par.fwd = s_forward;
			}


			// General Sinusoidal Series
			template <typename PAR>
			void setup_gn_sinu(PAR& par, par_gn_sinu& proj_parm)
			{
				if (pj_param(par.params, "tn").i && pj_param(par.params, "tm").i) {
					proj_parm.n = pj_param(par.params, "dn").f;
					proj_parm.m = pj_param(par.params, "dm").f;
				} else
					throw proj_exception(-99);
				setup(par, proj_parm);
			}

			// Sinusoidal (Sanson-Flamsteed)
			template <typename PAR>
			void setup_sinu(PAR& par, par_gn_sinu& proj_parm)
			{
					pj_enfn(par.es, proj_parm.en);

				if (par.es) {
				// par.inv = e_inverse;
				// par.fwd = e_forward;
				} else {
					proj_parm.n = 1.;
					proj_parm.m = 0.;
					setup(par, proj_parm);
				}
			}

			// Eckert VI
			template <typename PAR>
			void setup_eck6(PAR& par, par_gn_sinu& proj_parm)
			{
				proj_parm.m = 1.;
				proj_parm.n = 2.570796326794896619231321691;
				setup(par, proj_parm);
			}

			// McBryde-Thomas Flat-Polar Sinusoidal
			template <typename PAR>
			void setup_mbtfps(PAR& par, par_gn_sinu& proj_parm)
			{
				proj_parm.m = 0.5;
				proj_parm.n = 1.785398163397448309615660845;
				setup(par, proj_parm);
			}

		} // namespace gn_sinu
	} //namespaces impl
	#endif // doxygen

	/*!
		\brief Sinusoidal (Sanson-Flamsteed) projection
		\ingroup projections
		\tparam LL latlong point type
		\tparam XY xy point type
		\tparam PAR parameter type
		\par Projection characteristics
		 - Pseudocylindrical
		 - Spheroid
		 - Ellipsoid
		\par Example
		\image html ex_sinu.gif
	*/
	template <typename LL, typename XY, typename PAR = parameters>
	struct sinu_ellipsoid : public impl::gn_sinu::base_gn_sinu_ellipsoid<LL, XY, PAR>
	{
		inline sinu_ellipsoid(const PAR& par) : impl::gn_sinu::base_gn_sinu_ellipsoid<LL, XY, PAR>(par)
		{
			impl::gn_sinu::setup_sinu(this->m_par, this->m_proj_parm);
		}
	};

	/*!
		\brief General Sinusoidal Series projection
		\ingroup projections
		\tparam LL latlong point type
		\tparam XY xy point type
		\tparam PAR parameter type
		\par Projection characteristics
		 - Pseudocylindrical
		 - Spheroid
		 - m= n=
		\par Example
		\image html ex_gn_sinu.gif
	*/
	template <typename LL, typename XY, typename PAR = parameters>
	struct gn_sinu_spheroid : public impl::gn_sinu::base_gn_sinu_spheroid<LL, XY, PAR>
	{
		inline gn_sinu_spheroid(const PAR& par) : impl::gn_sinu::base_gn_sinu_spheroid<LL, XY, PAR>(par)
		{
			impl::gn_sinu::setup_gn_sinu(this->m_par, this->m_proj_parm);
		}
	};

	/*!
		\brief Sinusoidal (Sanson-Flamsteed) projection
		\ingroup projections
		\tparam LL latlong point type
		\tparam XY xy point type
		\tparam PAR parameter type
		\par Projection characteristics
		 - Pseudocylindrical
		 - Spheroid
		 - Ellipsoid
		\par Example
		\image html ex_sinu.gif
	*/
	template <typename LL, typename XY, typename PAR = parameters>
	struct sinu_spheroid : public impl::gn_sinu::base_gn_sinu_spheroid<LL, XY, PAR>
	{
		inline sinu_spheroid(const PAR& par) : impl::gn_sinu::base_gn_sinu_spheroid<LL, XY, PAR>(par)
		{
			impl::gn_sinu::setup_sinu(this->m_par, this->m_proj_parm);
		}
	};

	/*!
		\brief Eckert VI projection
		\ingroup projections
		\tparam LL latlong point type
		\tparam XY xy point type
		\tparam PAR parameter type
		\par Projection characteristics
		 - Pseudocylindrical
		 - Spheroid
		\par Example
		\image html ex_eck6.gif
	*/
	template <typename LL, typename XY, typename PAR = parameters>
	struct eck6_spheroid : public impl::gn_sinu::base_gn_sinu_spheroid<LL, XY, PAR>
	{
		inline eck6_spheroid(const PAR& par) : impl::gn_sinu::base_gn_sinu_spheroid<LL, XY, PAR>(par)
		{
			impl::gn_sinu::setup_eck6(this->m_par, this->m_proj_parm);
		}
	};

	/*!
		\brief McBryde-Thomas Flat-Polar Sinusoidal projection
		\ingroup projections
		\tparam LL latlong point type
		\tparam XY xy point type
		\tparam PAR parameter type
		\par Projection characteristics
		 - Pseudocylindrical
		 - Spheroid
		\par Example
		\image html ex_mbtfps.gif
	*/
	template <typename LL, typename XY, typename PAR = parameters>
	struct mbtfps_spheroid : public impl::gn_sinu::base_gn_sinu_spheroid<LL, XY, PAR>
	{
		inline mbtfps_spheroid(const PAR& par) : impl::gn_sinu::base_gn_sinu_spheroid<LL, XY, PAR>(par)
		{
			impl::gn_sinu::setup_mbtfps(this->m_par, this->m_proj_parm);
		}
	};

	#ifndef DOXYGEN_NO_IMPL
	namespace impl
	{

		// Factory entry(s)
		template <typename LL, typename XY, typename PAR>
		class gn_sinu_entry : public impl::factory_entry<LL, XY, PAR>
		{
			public :
				virtual projection<LL, XY>* create_new(const PAR& par) const
				{
					return new base_v_fi<gn_sinu_spheroid<LL, XY, PAR>, LL, XY, PAR>(par);
				}
		};

		template <typename LL, typename XY, typename PAR>
		class sinu_entry : public impl::factory_entry<LL, XY, PAR>
		{
			public :
				virtual projection<LL, XY>* create_new(const PAR& par) const
				{
					if (par.es)
						return new base_v_fi<sinu_ellipsoid<LL, XY, PAR>, LL, XY, PAR>(par);
					else
						return new base_v_fi<sinu_spheroid<LL, XY, PAR>, LL, XY, PAR>(par);
				}
		};

		template <typename LL, typename XY, typename PAR>
		class eck6_entry : public impl::factory_entry<LL, XY, PAR>
		{
			public :
				virtual projection<LL, XY>* create_new(const PAR& par) const
				{
					return new base_v_fi<eck6_spheroid<LL, XY, PAR>, LL, XY, PAR>(par);
				}
		};

		template <typename LL, typename XY, typename PAR>
		class mbtfps_entry : public impl::factory_entry<LL, XY, PAR>
		{
			public :
				virtual projection<LL, XY>* create_new(const PAR& par) const
				{
					return new base_v_fi<mbtfps_spheroid<LL, XY, PAR>, LL, XY, PAR>(par);
				}
		};

		template <typename LL, typename XY, typename PAR>
		inline void gn_sinu_init(impl::base_factory<LL, XY, PAR>& factory)
		{
			factory.add_to_factory("gn_sinu", new gn_sinu_entry<LL, XY, PAR>);
			factory.add_to_factory("sinu", new sinu_entry<LL, XY, PAR>);
			factory.add_to_factory("eck6", new eck6_entry<LL, XY, PAR>);
			factory.add_to_factory("mbtfps", new mbtfps_entry<LL, XY, PAR>);
		}

	} // namespace impl
	#endif // doxygen

}

#endif // _PROJECTIONS_GN_SINU_HPP


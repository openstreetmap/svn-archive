#ifndef _PROJECTIONS_GSTMERC_HPP
#define _PROJECTIONS_GSTMERC_HPP

// Generic Geometry Library - projections (based on PROJ4)
// This file is automatically generated. DO NOT EDIT.

// Copyright Barend Gehrels (1995-2009), Geodan Holding B.V. Amsterdam, the Netherlands.
// Copyright Bruno Lalande (2008-2009)
// Use, modification and distribution is subject to the Boost Software License,
// Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

// This file is converted from PROJ4, http://trac.osgeo.org/proj
// PROJ4 is originally written by Gerald Evenden (then of the USGS)
// PROJ4 is maintained by Frank Warmerdam
// PROJ4 is converted to Geometry Library by Barend Gehrels (Geodan, Amsterdam)

// Original copyright notice:

// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
// THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include <geometry/projections/impl/base_static.hpp>
#include <geometry/projections/impl/base_dynamic.hpp>
#include <geometry/projections/impl/projects.hpp>
#include <geometry/projections/impl/factory_entry.hpp>
#include <geometry/projections/impl/pj_tsfn.hpp>
#include <geometry/projections/impl/pj_phi2.hpp>

namespace projection
{
	#ifndef DOXYGEN_NO_IMPL
	namespace impl
	{
		namespace gstmerc
		{

			struct par_gstmerc
			{
				double lamc;
				double phic;
				double c;
				double n1;
				double n2;
				double XS;
				double YS;
			};


			// template class, using CRTP to implement forward/inverse
			template <typename LL, typename XY, typename PAR>
			struct base_gstmerc_spheroid : public base_t_fi<base_gstmerc_spheroid<LL, XY, PAR>, LL, XY, PAR>
			{

				typedef typename base_t_fi<base_gstmerc_spheroid<LL, XY, PAR>, LL, XY, PAR>::LL_T LL_T;
				typedef typename base_t_fi<base_gstmerc_spheroid<LL, XY, PAR>, LL, XY, PAR>::XY_T XY_T;

				par_gstmerc m_proj_parm;

				inline base_gstmerc_spheroid(const PAR& par)
					: base_t_fi<base_gstmerc_spheroid<LL, XY, PAR>, LL, XY, PAR>(*this, par) {}

				inline void fwd(LL_T& lp_lon, LL_T& lp_lat, XY_T& xy_x, XY_T& xy_y) const
				{
					double L, Ls, sinLs1, Ls1;
					L= this->m_proj_parm.n1*lp_lon;
				    Ls= this->m_proj_parm.c+this->m_proj_parm.n1*log(pj_tsfn(-1.0*lp_lat,-1.0*sin(lp_lat),this->m_par.e));
				    sinLs1= sin(L)/cosh(Ls);
				    Ls1= log(pj_tsfn(-1.0*asin(sinLs1),0.0,0.0));
				    xy_x= (this->m_proj_parm.XS + this->m_proj_parm.n2*Ls1)*this->m_par.ra;
				    xy_y= (this->m_proj_parm.YS + this->m_proj_parm.n2*atan(sinh(Ls)/cos(L)))*this->m_par.ra;
				}

				inline void inv(XY_T& xy_x, XY_T& xy_y, LL_T& lp_lon, LL_T& lp_lat) const
				{
					double L, LC, sinC;
					L= atan(sinh((xy_x - this->m_proj_parm.XS)*this->m_par.a/this->m_proj_parm.n2)/cos((xy_y - this->m_proj_parm.YS)*this->m_par.a/this->m_proj_parm.n2));
				    sinC= sin((xy_y - this->m_proj_parm.YS)*this->m_par.a/this->m_proj_parm.n2)/cosh((xy_x - this->m_proj_parm.XS)*this->m_par.a/this->m_proj_parm.n2);
				    LC= log(pj_tsfn(-1.0*asin(sinC),0.0,0.0));
				    lp_lon= L/this->m_proj_parm.n1;
				    lp_lat= -1.0*pj_phi2(exp((LC-this->m_proj_parm.c)/this->m_proj_parm.n1),this->m_par.e);
				}
			};

			// Gauss-Schreiber Transverse Mercator (aka Gauss-Laborde Reunion)
			template <typename PAR>
			void setup_gstmerc(PAR& par, par_gstmerc& proj_parm)
			{
			    proj_parm.n1= sqrt(1.0+par.es*pow(cos(par.phi0),4.0)/(1.0-par.es));
			    proj_parm.phic= asin(sin(par.phi0)/proj_parm.n1);
			    proj_parm.c=       log(pj_tsfn(-1.0*proj_parm.phic,0.0,0.0))
			         -proj_parm.n1*log(pj_tsfn(-1.0*par.phi0,-1.0*sin(par.phi0),par.e));
			    proj_parm.n2= par.k0*par.a*sqrt(1.0-par.es)/(1.0-par.es*sin(par.phi0)*sin(par.phi0));
			    proj_parm.XS= 0;
			    proj_parm.YS= -1.0*proj_parm.n2*proj_parm.phic;
				// par.inv= s_inverse;
				// par.fwd= s_forward;
			}

		} // namespace gstmerc
	} //namespaces impl
	#endif // doxygen

	/*!
		\brief Gauss-Schreiber Transverse Mercator (aka Gauss-Laborde Reunion) projection
		\ingroup projections
		\tparam LL latlong point type
		\tparam XY xy point type
		\tparam PAR parameter type
		\par Projection characteristics
		 - Cylindrical
		 - Spheroid
		 - Ellipsoid
		 - lat_0= lon_0= k_0=
		\par Example
		\image html ex_gstmerc.gif
	*/
	template <typename LL, typename XY, typename PAR = parameters>
	struct gstmerc_spheroid : public impl::gstmerc::base_gstmerc_spheroid<LL, XY, PAR>
	{
		inline gstmerc_spheroid(const PAR& par) : impl::gstmerc::base_gstmerc_spheroid<LL, XY, PAR>(par)
		{
			impl::gstmerc::setup_gstmerc(this->m_par, this->m_proj_parm);
		}
	};

	#ifndef DOXYGEN_NO_IMPL
	namespace impl
	{

		// Factory entry(s)
		template <typename LL, typename XY, typename PAR>
		class gstmerc_entry : public impl::factory_entry<LL, XY, PAR>
		{
			public :
				virtual projection<LL, XY>* create_new(const PAR& par) const
				{
					return new base_v_fi<gstmerc_spheroid<LL, XY, PAR>, LL, XY, PAR>(par);
				}
		};

		template <typename LL, typename XY, typename PAR>
		inline void gstmerc_init(impl::base_factory<LL, XY, PAR>& factory)
		{
			factory.add_to_factory("gstmerc", new gstmerc_entry<LL, XY, PAR>);
		}

	} // namespace impl
	#endif // doxygen

}

#endif // _PROJECTIONS_GSTMERC_HPP


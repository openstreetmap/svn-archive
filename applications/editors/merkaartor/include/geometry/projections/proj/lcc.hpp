#ifndef _PROJECTIONS_LCC_HPP
#define _PROJECTIONS_LCC_HPP

// Generic Geometry Library - projections (based on PROJ4)
// This file is automatically generated. DO NOT EDIT.

// Copyright Barend Gehrels (1995-2009), Geodan Holding B.V. Amsterdam, the Netherlands.
// Copyright Bruno Lalande (2008-2009)
// Use, modification and distribution is subject to the Boost Software License,
// Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

// This file is converted from PROJ4, http://trac.osgeo.org/proj
// PROJ4 is originally written by Gerald Evenden (then of the USGS)
// PROJ4 is maintained by Frank Warmerdam
// PROJ4 is converted to Geometry Library by Barend Gehrels (Geodan, Amsterdam)

// Original copyright notice:

// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
// THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include <geometry/projections/impl/base_static.hpp>
#include <geometry/projections/impl/base_dynamic.hpp>
#include <geometry/projections/impl/projects.hpp>
#include <geometry/projections/impl/factory_entry.hpp>
#include <geometry/projections/impl/pj_msfn.hpp>
#include <geometry/projections/impl/pj_tsfn.hpp>
#include <geometry/projections/impl/pj_phi2.hpp>

#include <geometry/projections/epsg_traits.hpp>

namespace projection
{
	#ifndef DOXYGEN_NO_IMPL
	namespace impl
	{
		namespace lcc
		{
			static const double EPS10 = 1.e-10;

			struct par_lcc
			{
				double phi1;
				double phi2;
				double n;
				double rho;
				double rho0;
				double c;
				int  ellips;
			};

			// template class, using CRTP to implement forward/inverse
			template <typename LL, typename XY, typename PAR>
			struct base_lcc_ellipsoid : public base_t_fi<base_lcc_ellipsoid<LL, XY, PAR>, LL, XY, PAR>
			{

				typedef typename base_t_fi<base_lcc_ellipsoid<LL, XY, PAR>, LL, XY, PAR>::LL_T LL_T;
				typedef typename base_t_fi<base_lcc_ellipsoid<LL, XY, PAR>, LL, XY, PAR>::XY_T XY_T;

				mutable par_lcc m_proj_parm;

				inline base_lcc_ellipsoid(const PAR& par)
					: base_t_fi<base_lcc_ellipsoid<LL, XY, PAR>, LL, XY, PAR>(*this, par) {}

				inline void fwd(LL_T& lp_lon, LL_T& lp_lat, XY_T& xy_x, XY_T& xy_y) const
				{
					if (fabs(fabs(lp_lat) - HALFPI) < EPS10) {
						if ((lp_lat * this->m_proj_parm.n) <= 0.) throw proj_exception();;
						this->m_proj_parm.rho = 0.;
						}
					else
						this->m_proj_parm.rho = this->m_proj_parm.c * (this->m_proj_parm.ellips ? pow(pj_tsfn(lp_lat, sin(lp_lat),
							this->m_par.e), this->m_proj_parm.n) : pow(tan(FORTPI + .5 * lp_lat), -this->m_proj_parm.n));
					xy_x = this->m_par.k0 * (this->m_proj_parm.rho * sin( lp_lon *= this->m_proj_parm.n ) );
					xy_y = this->m_par.k0 * (this->m_proj_parm.rho0 - this->m_proj_parm.rho * cos(lp_lon) );
				}

				inline void inv(XY_T& xy_x, XY_T& xy_y, LL_T& lp_lon, LL_T& lp_lat) const
				{
					xy_x /= this->m_par.k0;
					xy_y /= this->m_par.k0;
					if( (this->m_proj_parm.rho = hypot(xy_x, xy_y = this->m_proj_parm.rho0 - xy_y)) != 0.0) {
						if (this->m_proj_parm.n < 0.) {
							this->m_proj_parm.rho = -this->m_proj_parm.rho;
							xy_x = -xy_x;
							xy_y = -xy_y;
						}
						if (this->m_proj_parm.ellips) {
							if ((lp_lat = pj_phi2(pow(this->m_proj_parm.rho / this->m_proj_parm.c, 1./this->m_proj_parm.n), this->m_par.e))
								== HUGE_VAL)
								throw proj_exception();;
						} else
							lp_lat = 2. * atan(pow(this->m_proj_parm.c / this->m_proj_parm.rho, 1./this->m_proj_parm.n)) - HALFPI;
						lp_lon = atan2(xy_x, xy_y) / this->m_proj_parm.n;
					} else {
						lp_lon = 0.;
						lp_lat = this->m_proj_parm.n > 0. ? HALFPI : - HALFPI;
					}
				}

				#ifdef SPECIAL_FACTORS_NOT_CONVERTED
				inline void fac(LL lp, FACTORS &fac) const
				{
					if (fabs(fabs(lp_lat) - HALFPI) < EPS10) {
						if ((lp_lat * this->m_proj_parm.n) <= 0.) return;
						this->m_proj_parm.rho = 0.;
					} else
						this->m_proj_parm.rho = this->m_proj_parm.c * (this->m_proj_parm.ellips ? pow(pj_tsfn(lp_lat, sin(lp_lat),
							this->m_par.e), this->m_proj_parm.n) : pow(tan(FORTPI + .5 * lp_lat), -this->m_proj_parm.n));
					this->m_fac.code |= IS_ANAL_HK + IS_ANAL_CONV;
					this->m_fac.k = this->m_fac.h = this->m_par.k0 * this->m_proj_parm.n * this->m_proj_parm.rho /
						pj_msfn(sin(lp_lat), cos(lp_lat), this->m_par.es);
					this->m_fac.conv = - this->m_proj_parm.n * lp_lon;
				}
				#endif
			};

			// Lambert Conformal Conic
			template <typename PAR>
			void setup_lcc(PAR& par, par_lcc& proj_parm)
			{
				double cosphi, sinphi;
				int secant;
				proj_parm.phi1 = pj_param(par.params, "rlat_1").f;
				if (pj_param(par.params, "tlat_2").i)
					proj_parm.phi2 = pj_param(par.params, "rlat_2").f;
				else {
					proj_parm.phi2 = proj_parm.phi1;
					if (!pj_param(par.params, "tlat_0").i)
						par.phi0 = proj_parm.phi1;
				}
				if (fabs(proj_parm.phi1 + proj_parm.phi2) < EPS10) throw proj_exception(-21);
				proj_parm.n = sinphi = sin(proj_parm.phi1);
				cosphi = cos(proj_parm.phi1);
				secant = fabs(proj_parm.phi1 - proj_parm.phi2) >= EPS10;
				if( (proj_parm.ellips = (par.es != 0.)) ) {
					double ml1, m1;
					par.e = sqrt(par.es);
					m1 = pj_msfn(sinphi, cosphi, par.es);
					ml1 = pj_tsfn(proj_parm.phi1, sinphi, par.e);
					if (secant) { /* secant cone */
						proj_parm.n = log(m1 /
						   pj_msfn(sinphi = sin(proj_parm.phi2), cos(proj_parm.phi2), par.es));
						proj_parm.n /= log(ml1 / pj_tsfn(proj_parm.phi2, sinphi, par.e));
					}
					proj_parm.c = (proj_parm.rho0 = m1 * pow(ml1, -proj_parm.n) / proj_parm.n);
					proj_parm.rho0 *= (fabs(fabs(par.phi0) - HALFPI) < EPS10) ? 0. :
						pow(pj_tsfn(par.phi0, sin(par.phi0), par.e), proj_parm.n);
				} else {
					if (secant)
						proj_parm.n = log(cosphi / cos(proj_parm.phi2)) /
						   log(tan(FORTPI + .5 * proj_parm.phi2) /
						   tan(FORTPI + .5 * proj_parm.phi1));
					proj_parm.c = cosphi * pow(tan(FORTPI + .5 * proj_parm.phi1), proj_parm.n) / proj_parm.n;
					proj_parm.rho0 = (fabs(fabs(par.phi0) - HALFPI) < EPS10) ? 0. :
						proj_parm.c * pow(tan(FORTPI + .5 * par.phi0), -proj_parm.n);
				}
				// par.inv = e_inverse;
				// par.fwd = e_forward;
				// par.spc = fac;
			}

		} // namespace lcc
	} //namespaces impl
	#endif // doxygen

	/*!
		\brief Lambert Conformal Conic projection
		\ingroup projections
		\tparam LL latlong point type
		\tparam XY xy point type
		\tparam PAR parameter type
		\par Projection characteristics
		 - Conic
		 - Spheroid
		 - Ellipsoid
		 - lat_1= and lat_2= or lat_0
		\par Example
		\image html ex_lcc.gif
	*/
	template <typename LL, typename XY, typename PAR = parameters>
	struct lcc_ellipsoid : public impl::lcc::base_lcc_ellipsoid<LL, XY, PAR>
	{
		inline lcc_ellipsoid(const PAR& par) : impl::lcc::base_lcc_ellipsoid<LL, XY, PAR>(par)
		{
			impl::lcc::setup_lcc(this->m_par, this->m_proj_parm);
		}
	};

	#ifndef DOXYGEN_NO_IMPL
	namespace impl
	{

		// Factory entry(s)
		template <typename LL, typename XY, typename PAR>
		class lcc_entry : public impl::factory_entry<LL, XY, PAR>
		{
			public :
				virtual projection<LL, XY>* create_new(const PAR& par) const
				{
					return new base_v_fi<lcc_ellipsoid<LL, XY, PAR>, LL, XY, PAR>(par);
				}
		};

		template <typename LL, typename XY, typename PAR>
		inline void lcc_init(impl::base_factory<LL, XY, PAR>& factory)
		{
			factory.add_to_factory("lcc", new lcc_entry<LL, XY, PAR>);
		}

	} // namespace impl
	// Create EPSG specializations
	// (Proof of Concept, only for some)

	template<typename LLR, typename XY, typename PAR>
	struct epsg_traits<2805, LLR, XY, PAR>
	{
		typedef lcc_ellipsoid<LLR, XY, PAR> type;
		static inline std::string par()
		{
			return "+proj=lcc +lat_1=42.68333333333333 +lat_2=41.71666666666667 +lat_0=41 +lon_0=-71.5 +x_0=200000 +y_0=750000 +ellps=GRS80 +units=m";
		}
	};


	#endif // doxygen

}

#endif // _PROJECTIONS_LCC_HPP


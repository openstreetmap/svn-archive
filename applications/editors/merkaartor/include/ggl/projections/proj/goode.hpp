#ifndef GGL_PROJECTIONS_GOODE_HPP
#define GGL_PROJECTIONS_GOODE_HPP

// Generic Geometry Library - projections (based on PROJ4)
// This file is automatically generated. DO NOT EDIT.

// Copyright Barend Gehrels (1995-2009), Geodan Holding B.V. Amsterdam, the Netherlands.
// Copyright Bruno Lalande (2008-2009)
// Use, modification and distribution is subject to the Boost Software License,
// Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

// This file is converted from PROJ4, http://trac.osgeo.org/proj
// PROJ4 is originally written by Gerald Evenden (then of the USGS)
// PROJ4 is maintained by Frank Warmerdam
// PROJ4 is converted to Geometry Library by Barend Gehrels (Geodan, Amsterdam)

// Original copyright notice:

// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
// THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include <ggl/projections/impl/base_static.hpp>
#include <ggl/projections/impl/base_dynamic.hpp>
#include <ggl/projections/impl/projects.hpp>
#include <ggl/projections/impl/factory_entry.hpp>

#include <ggl/projections/proj/moll.hpp>
#include <ggl/projections/proj/gn_sinu.hpp>

namespace ggl { namespace projection
{
    #ifndef DOXYGEN_NO_IMPL
    namespace impl { namespace goode{
            static const double Y_COR = 0.05280;
            static const double PHI_LIM = .71093078197902358062;

            template <typename LatLong, typename Cartesian, typename Parameters>
            struct par_goode
            {
                sinu_ellipsoid<LatLong, Cartesian, Parameters> sinu;
                moll_spheroid<LatLong, Cartesian, Parameters> moll;

                par_goode(const Parameters& par) : sinu(par), moll(par) {}
            };

            // template class, using CRTP to implement forward/inverse
            template <typename LatLong, typename Cartesian, typename Parameters>
            struct base_goode_spheroid : public base_t_fi<base_goode_spheroid<LatLong, Cartesian, Parameters>, LatLong, Cartesian, Parameters>
            {

                typedef typename base_t_fi<base_goode_spheroid<LatLong, Cartesian, Parameters>, LatLong, Cartesian, Parameters>::LL_T LL_T;
                typedef typename base_t_fi<base_goode_spheroid<LatLong, Cartesian, Parameters>, LatLong, Cartesian, Parameters>::XY_T XY_T;

                par_goode<LatLong, Cartesian, Parameters> m_proj_parm;

                inline base_goode_spheroid(const Parameters& par)
                    : base_t_fi<base_goode_spheroid<LatLong, Cartesian, Parameters>, LatLong, Cartesian, Parameters>(*this, par), m_proj_parm(par) {}

                inline void fwd(LL_T& lp_lon, LL_T& lp_lat, XY_T& xy_x, XY_T& xy_y) const
                {
                    if (fabs(lp_lat) <= PHI_LIM)
                        this->m_proj_parm.sinu.fwd(lp_lon, lp_lat, xy_x, xy_y);
                    else {
                        this->m_proj_parm.moll.fwd(lp_lon, lp_lat, xy_x, xy_y);
                        xy_y -= lp_lat >= 0.0 ? Y_COR : -Y_COR;
                    }
                }

                inline void inv(XY_T& xy_x, XY_T& xy_y, LL_T& lp_lon, LL_T& lp_lat) const
                {
                    if (fabs(xy_y) <= PHI_LIM)
                        this->m_proj_parm.sinu.inv(xy_x, xy_y, lp_lon, lp_lat);
                    else {
                        xy_y += xy_y >= 0.0 ? Y_COR : -Y_COR;
                        this->m_proj_parm.moll.inv(xy_x, xy_y, lp_lon, lp_lat);
                    }
                }
            };

            // Goode Homolosine
            template <typename LatLong, typename Cartesian, typename Parameters>
            void setup_goode(Parameters& par, par_goode<LatLong, Cartesian, Parameters>&)
            {
                par.es = 0.;
                // par.fwd = s_forward;
                // par.inv = s_inverse;
            }

        }} // namespace impl::goode
    #endif // doxygen

    /*!
        \brief Goode Homolosine projection
        \ingroup projections
        \tparam LatLong latlong point type
        \tparam Cartesian xy point type
        \tparam Parameters parameter type
        \par Projection characteristics
         - Pseudocylindrical
         - Spheroid
        \par Example
        \image html ex_goode.gif
    */
    template <typename LatLong, typename Cartesian, typename Parameters = parameters>
    struct goode_spheroid : public impl::goode::base_goode_spheroid<LatLong, Cartesian, Parameters>
    {
        inline goode_spheroid(const Parameters& par) : impl::goode::base_goode_spheroid<LatLong, Cartesian, Parameters>(par)
        {
            impl::goode::setup_goode(this->m_par, this->m_proj_parm);
        }
    };

    #ifndef DOXYGEN_NO_IMPL
    namespace impl
    {

        // Factory entry(s)
        template <typename LatLong, typename Cartesian, typename Parameters>
        class goode_entry : public impl::factory_entry<LatLong, Cartesian, Parameters>
        {
            public :
                virtual projection<LatLong, Cartesian>* create_new(const Parameters& par) const
                {
                    return new base_v_fi<goode_spheroid<LatLong, Cartesian, Parameters>, LatLong, Cartesian, Parameters>(par);
                }
        };

        template <typename LatLong, typename Cartesian, typename Parameters>
        inline void goode_init(impl::base_factory<LatLong, Cartesian, Parameters>& factory)
        {
            factory.add_to_factory("goode", new goode_entry<LatLong, Cartesian, Parameters>);
        }

    } // namespace impl
    #endif // doxygen

}} // namespace ggl::projection

#endif // GGL_PROJECTIONS_GOODE_HPP


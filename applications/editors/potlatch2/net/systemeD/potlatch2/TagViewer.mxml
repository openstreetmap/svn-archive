<?xml version="1.0" encoding="utf-8"?>
<mx:VBox
	xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:flexlib="flexlib.containers.*"
    backgroundColor="white"
    initialize="loadFeatures()">

  <mx:ViewStack id="stack" width="100%" height="100%">
  <mx:VBox width="100%" height="100%" label="Simple">
    <mx:HBox borderStyle="inset" verticalAlign="middle" width="100%" paddingLeft="3" id="iconContainer">
        <mx:Image id="iconImage"/>
        <mx:VBox width="100%" verticalGap="1">
          <mx:PopUpButton id="popupChange" creationComplete="initFeatureBox()" openAlways="true" width="100%"/>
          <mx:Text condenseWhite="true" width="100%" id="iconText"/>
        </mx:VBox>
        <mx:LinkButton label="?" click="openDescription()" id="helpLabel"/>
    </mx:HBox>
    <flexlib:SuperTabNavigator id="editorStack" width="100%" height="100%" paddingLeft="2" paddingRight="2"
        allowTabSqueezing="false" minTabWidth="10" closePolicy="close_never"
        scrollSpeed="20"/>
  </mx:VBox>

  <mx:VBox width="100%" height="100%" label="Advanced" initialize="checkAdvanced()" verticalGap="1">
    <mx:Label id="advancedID">
      <mx:htmlText><![CDATA[<i>No Selection</i>]]></mx:htmlText>
    </mx:Label>

    <mx:DataGrid editable="true" width="100%" height="75%" id="advancedTagGrid">
            <mx:columns>
                <mx:DataGridColumn editable="true" dataField="key" headerText="Key"/>
                <mx:DataGridColumn editable="true" dataField="value" headerText="Value"/>
            </mx:columns>
    </mx:DataGrid>

    <mx:HBox horizontalAlign="right" width="100%">
      <mx:LinkButton label="Delete" click="removeTag()"/>
      <mx:LinkButton label="Add" click="addNewTag()"/>
    </mx:HBox>
    
    <mx:DataGrid editable="true" width="100%" height="25%" id="relationsGrid"
        doubleClickEnabled="true"
        itemDoubleClick="editRelation(ListEvent(event).rowIndex)">
        <mx:columns>
            <mx:DataGridColumn editable="false" dataField="description" headerText="Relation"/>
            <mx:DataGridColumn editable="false" dataField="id" headerText="ID"/>
            <mx:DataGridColumn editable="true" dataField="role" headerText="Role"/>
        </mx:columns>
    </mx:DataGrid>

    <mx:HBox horizontalAlign="right" width="100%">
      <mx:LinkButton label="Remove from" click="removeFromRelation()"/>
      <mx:LinkButton label="Add to" click="addToRelation()"/>
    </mx:HBox>

  </mx:VBox>

  </mx:ViewStack>

  <mx:LinkBar dataProvider="{stack}"/>

  <mx:Script><![CDATA[
      import net.systemeD.halcyon.connection.*;
      import net.systemeD.potlatch2.mapfeatures.*;

      import mx.collections.*;
      import mx.containers.*;
      import mx.events.*;
      import mx.core.*;
      import mx.managers.PopUpManager;
      import flash.geom.Point;
      
      private var mapFeatures:MapFeatures;
      private var selectedEntity:Entity;
      private var tagDataProvider:ArrayCollection;
      private var tw:CategorySelector = null;
      private var feature:Feature = null;

      public function setEntity(entity:Entity):void {
          if ( selectedEntity != entity ) {
              if ( selectedEntity != null )
                  selectedEntity.removeEventListener(Connection.TAG_CHANGE, tagChanged);
              selectedEntity = entity;
              if ( selectedEntity != null )
                  selectedEntity.addEventListener(Connection.TAG_CHANGE, tagChanged);
          }

          if ( advancedID != null )
              setupAdvanced(entity);

          refreshFeatureIcon();
      }

      private function refreshFeatureIcon():void {
          var oldFeature:Feature = feature;
          feature = selectedEntity == null ? null : mapFeatures.findMatchingFeature(selectedEntity);
          if ( feature != oldFeature )
              initialiseEditors();

          if ( feature != null )
              setFeatureIcon(selectedEntity, feature);
          else
              blankFeatureIcon(selectedEntity);
      }

      private function setFeatureIcon(entity:Entity, feature:Feature):void {
          //blankFeatureIcon(entity);
          
          iconImage.source = feature.image;

          var txt:String = feature.htmlDetails(entity);
          iconText.htmlText = txt;
          popupChange.label = feature.name;
          tw.setSelectedFeature(feature);
      }

      private function blankFeatureIcon(entity:Entity):void {
          iconImage.source = null;
          iconText.htmlText = entity == null ?
               "<i>Nothing selected</i>" :
               "<b>Not recognised</b><br/>Try looking at the tags under the advanced properties";
          popupChange.label = "unknown";
          tw.setSelectedFeature(null);
      }

      private function initialiseEditors():void {
          editorStack.removeAllChildren();
          if ( selectedEntity == null || feature == null )
              return;
          
          var editorBox:VBox = createEditorBox();
          editorBox.label = "Basic";
          editorStack.addChild(editorBox);
          
          var tabs:Object = {};
          
          for each (var factory:EditorFactory in feature.editors) {
              if ( factory.presence.isEditorPresent(factory, selectedEntity, null) ) {
                  var editor:DisplayObject = factory.createEditorInstance(selectedEntity);
                  if ( editor != null )
                      editorBox.addChild(editor);
              }
              var category:String = factory.category;
              var tab:VBox = tabs[category];
              if ( tab == null ) {
                  tab = createEditorBox();
                  tab.label = category;
                  editorStack.addChild(tab);
                  tabs[category] = tab;
              }
              var catEditor:DisplayObject = factory.createEditorInstance(selectedEntity);
              if ( catEditor != null )
                  tab.addChild(catEditor);
          }
      }
      
      private function createEditorBox():VBox {
          var box:VBox = new VBox();
          box.percentWidth = 100;
          box.percentHeight = 100;
          return box;
      }

      private function checkAdvanced():void {
          if ( selectedEntity != null )
             setupAdvanced(selectedEntity);
      }

      private function setupAdvanced(entity:Entity):void {
          if ( tagDataProvider == null ) {
              tagDataProvider = new ArrayCollection();
              advancedTagGrid.dataProvider = tagDataProvider;
          }

          tagDataProvider.removeAll();
          
          if ( entity == null ) {
              advancedID.htmlText = "";
          } else {
              var entityText:String = "xx";
              if ( entity is Node ) entityText = "Node";
              else if ( entity is Way ) entityText = "Way";
              else if ( entity is Relation ) entityText = "Relation";
              advancedID.htmlText = entityText+": <b>"+entity.id+"</b>";

              var tags:Array = entity.getTagArray();
              tags.sortOn("key");
              for each(var tag:Tag in tags)
                  tagDataProvider.addItem(tag);
          }
          
          if ( entity == null ) {
              relationsGrid.dataProvider = null;
          } else {
              var relations:Array = [];
              for each( var rel:Relation in entity.parentRelations ) {
                  var props:Object = {};
                  props["relation"] = rel;
                  props["id"] = rel.id;
                  var memberIndex:uint = rel.findEntityMemberIndex(entity);
                  props["role"] = rel.getMember(memberIndex).role;
                  
                  var desc:String = "";
                  var relTags:Object = rel.getTagsHash();
                  if ( relTags["type"] ) {
                      desc = relTags["type"];
                      if ( relTags[desc] )
                          desc += " " + relTags[desc];
                  }
                  if ( relTags["ref"] )
                      desc += " " + relTags["ref"];
                  if ( relTags["name"] )
                      desc += " " + relTags["name"];
                  props["description"] = desc;
                  
                  relations.push(props);
              }
              relationsGrid.dataProvider = relations;
          }
      }

      private function editRelation(index:uint):void {
          trace("edit relation "+index+" "+selectedEntity.parentRelations[index]);
          var panel:RelationEditorPanel = RelationEditorPanel(
              PopUpManager.createPopUp(Application(Application.application), RelationEditorPanel, true));
          panel.setRelation(selectedEntity.parentRelations[index]);
          PopUpManager.centerPopUp(panel);
      }
      
      private function tagChanged(event:TagEvent):void {
          refreshFeatureIcon();
          
          if ( tagDataProvider != null ) {
              // check to see if the key is already in our list
              var exists:Boolean = false;
              var tag:Tag = null;
              var i:uint;
              for ( i = 0; i < tagDataProvider.length && !exists; i++ ) {
                  tag = Tag(tagDataProvider.getItemAt(i));
                  exists = tag.key == event.key;
              }
              if ( !exists ) {
                  tag = new Tag(selectedEntity, event.key, event.newValue);
                  tagDataProvider.addItem(tag);
                  tagDataProvider.refresh();
              } else {
                  if ( event.newValue == null ) {
                      tagDataProvider.removeItemAt(i-1);
                      tagDataProvider.refresh();
                  } else {
                      tagDataProvider.itemUpdated(tag, "value");
                  }
              }
          }
      }

      public function loadFeatures():void {
          mapFeatures = MapFeatures.getInstance();
      }

      public function openDescription():void {
          trace("open description here");
      }

      public function addNewTag():void {
          var newKey:String = "(new tag)";
          var newTag:Tag = new Tag(selectedEntity, newKey, "(new value)");
          tagDataProvider.addItem(newTag);
          advancedTagGrid.editedItemPosition = {rowIndex: tagDataProvider.getItemIndex(newTag), columnIndex: 0};
      }

      public function removeTag():void {
          var k:String = advancedTagGrid.selectedItem.key;
          selectedEntity.setTag(k, null);
      }
      
      public function addToRelation():void {
      }
      
      public function removeFromRelation():void {
      }
      
      public function initFeatureBox():void {
          tw = new CategorySelector();
          tw.addEventListener("selectedType", changeFeatureType);
          popupChange.popUp = tw;
      }
      
      public function changeFeatureType(event:Event):void {
          if ( selectedEntity == null )
              return;

          var newFeature:Feature = tw.selectedType;
          
          // remove tags from the current feature
          if ( feature != null ) {
              for each( var oldtag:Object in feature.tags ) {
                  selectedEntity.setTag(oldtag["k"], null);
              }
          }
          
          // set tags for new feature
          if ( newFeature != null ) {
              for each( var newtag:Object in newFeature.tags ) {
                  selectedEntity.setTag(newtag["k"], newtag["v"]);
              }
          }
          
          popupChange.close();
      }
  ]]></mx:Script>
</mx:VBox>


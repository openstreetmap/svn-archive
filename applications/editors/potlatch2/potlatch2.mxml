<?xml version="1.0" encoding="utf-8"?>
<mx:Application 
	xmlns:mx="http://www.adobe.com/2006/mxml" 
	xmlns:halcyon="net.systemeD.halcyon.*"
	xmlns:potlatch2="net.systemeD.potlatch2.*"
	layout="vertical"
	horizontalAlign="center" 
	addedToStage="initApp()">
	
	<mx:Style source="styles/Application.css"/>

    <mx:Glow id="glowImage" duration="100" 
        alphaFrom="0.3" alphaTo="1.0" 
        blurXFrom="0.0" blurXTo="5.0" 
        blurYFrom="0.0" blurYTo="5.0" 
        color="0xFF8000"/>
    <mx:Glow id="unglowImage" duration="100" 
        alphaFrom="1.0" alphaTo="0.3" 
        blurXFrom="5.0" blurXTo="0.0" 
        blurYFrom="5.0" blurYTo="0.0" 
        color="0xFF8000"/>
    <mx:WipeLeft id="wipeOut" duration="250"/>
    <mx:WipeRight id="wipeIn" duration="250"/>

    <mx:ApplicationControlBar dock="true">
        <mx:Spacer width="100%"/>
        <mx:Button label="Save" icon="@Embed('embedded/save.svg')" click="SaveManager.saveChanges();"/>
    </mx:ApplicationControlBar>
    
    <mx:HDividedBox width="100%" height="100%">

      <mx:VBox height="100%" width="25%" horizontalAlign="right">
        <potlatch2:TagViewer width="100%" height="100%" id="tagViewer"/>
      </mx:VBox>
      <mx:Canvas width="75%" height="100%">
        <mx:Canvas id="map_area" resize="onResizeMap()"
            top="0" left="0" width="100%" height="100%">
        </mx:Canvas>
        <mx:Image source="@Embed('embedded/zoomIn.svg')" right="3" top="3" click="theMap.zoomIn();"
            rollOverEffect="glowImage" rollOutEffect="unglowImage"/>
        <mx:Image source="@Embed('embedded/zoomOut.svg')" right="3" top="20" click="theMap.zoomOut();"
            rollOverEffect="glowImage" rollOutEffect="unglowImage"/>
        <mx:TextArea id="dataWorking" text="" right="20" top="3" disabledColor="black" backgroundDisabledColor="0xFFFFEA" height="18"
            enabled="false" borderThickness="0"
            showEffect="{wipeIn}" hideEffect="{wipeOut}"/>
      </mx:Canvas>
    </mx:HDividedBox>

	<mx:Script><![CDATA[
		import net.systemeD.halcyon.*;
		import net.systemeD.halcyon.connection.*;
		import net.systemeD.potlatch2.*;
		import net.systemeD.potlatch2.save.SaveManager;
		import flash.system.Security;
		import flash.net.*;
		import flash.events.MouseEvent;
		import flash.display.Sprite;
		import mx.core.IChildList;
        import mx.containers.Canvas;
		import mx.core.Application;
		import com.yahoo.maps.api.YahooMap;
		import com.yahoo.maps.api.YahooMapEvent;
		import com.yahoo.maps.api.core.location.LatLon;

        public var theMap:Map;

		private function initApp():void {

			Globals.vars.map_area=map_area;
			Globals.vars.root=map_area.rawChildren;			// set up global reference to root level
			var _root:IChildList=map_area.rawChildren;		// convenient local shorthand

			// map backdrop object
            var w:uint = map_area.width;
            var h:uint = map_area.height;
            var b:Sprite = new Sprite();
            b.height=h; b.width=w;
            b.graphics.beginFill(0xFFFFEA,100); 
            b.graphics.drawRect(0,0,w,h); 
            b.graphics.endFill();
			_root.addChild(b);

/*			// Add Yahoo! background
			var yahoo:YahooMap = new YahooMap(); 
			yahoo.init("f0a.sejV34HnhgIbNSmVHmndXFpijgGeun0fSIMG9428hW_ifF3pYKwbV6r9iaXojl1lU_dakekR", w, h);  
			yahoo.mapType="satellite";
			_root.addChild(yahoo);

			// Yahoo! listeners
			var yahooListener:Object = new Object();
			yahooListener.yahooInit=function(event:YahooMapEvent):void {
				yahoo.zoomLevel = 18-theMap.scale;
				yahoo.centerLatLon = new LatLon(theMap.centre_lat, theMap.centre_lon);

				yahooListener.moveHandler=function(event:MapEvent):void {
					yahoo.zoomLevel=18-event.params.scale;
					yahoo.centerLatLon=new LatLon(event.params.lat, event.params.lon);
				};
				theMap.addEventListener(MapEvent.MOVE, yahooListener.moveHandler);

				yahooListener.resizeHandler=function(event:MapEvent):void {
					yahoo.setSize(event.params.width, event.params.height);
				};
				theMap.addEventListener(MapEvent.RESIZE, yahooListener.resizeHandler);
			}
			yahoo.addEventListener(YahooMapEvent.MAP_INITIALIZE, yahooListener.yahooInit);
*/
			// add map
			theMap=new Map(this.loaderInfo.parameters);
			theMap.backdrop=b;
			_root.addChild(theMap);
            theMap.updateSize(w, h);

			// add mask for map
			var s:Sprite=new Sprite();
			s.graphics.beginFill(0xFFFFFF,100);
			s.graphics.drawRect(0,0,w,h);
			s.graphics.endFill();
			_root.addChild(s);
			theMap.mask=s;

			// add crosshair
			/*s=new Sprite();
			s.graphics.lineStyle(2,0);
			s.graphics.moveTo(stage.stageWidth/2-20,stage.stageHeight/2);
			s.graphics.lineTo(stage.stageWidth/2+20,stage.stageHeight/2);
			s.graphics.moveTo(stage.stageWidth/2,stage.stageHeight/2-20);
			s.graphics.lineTo(stage.stageWidth/2,stage.stageHeight/2+20);
			_root.addChild(s);*/

			// mouse-up handler attached to stage, so the user can release outside the map
			stage.addEventListener(MouseEvent.MOUSE_UP, theMap.mouseUpHandler);
			Globals.vars.map_area.addEventListener(MouseEvent.MOUSE_MOVE, theMap.mouseMoveHandler);
			Globals.vars.map_area.addEventListener(MouseEvent.MOUSE_DOWN, theMap.mouseDownHandler);

			// keyboard event attached to stage
			stage.addEventListener(KeyboardEvent.KEY_UP, theMap.keyUpHandler);

			// example listener event
			var myListenerObj:Object = new Object();
			myListenerObj.mapHandler=function(event:MapEvent):void {
				Globals.vars.debug.appendText("Download event fired - "+event.params.minlat+","+event.params.minlon+"\n");
			};
			theMap.addEventListener(MapEvent.DOWNLOAD, myListenerObj.mapHandler);

			// add debug field
			var t:TextField=new TextField();
			t.width=500; t.height=150; t.border=true;
			t.multiline=true;
			_root.addChild(t);
			Globals.vars.debug=t;
            t.visible = loaderInfo.parameters["show_debug"] == 'true';
			Globals.vars.root=theMap;	// just for the addDebug function

            var controller:EditController = new EditController(theMap, tagViewer);
            controller.setActive();
            
            var conn:Connection = Connection.getConnectionInstance();
            conn.addEventListener(Connection.LOAD_STARTED, onDataStart);
            conn.addEventListener(Connection.LOAD_COMPLETED, onDataComplete);
		}

        public function onResizeMap():void {
            if ( theMap != null )
                theMap.updateSize(map_area.width, map_area.height);
        }

        private function onDataStart(event:Event):void {
            dataWorking.text = event.type == Connection.LOAD_STARTED ? "Loading data..." : "Saving Data...";
            dataWorking.visible = true;
        }
        private function onDataComplete(event:Event):void {
            dataWorking.visible = false;
        }
	]]></mx:Script>

</mx:Application>


//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1378
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace OsmUtils.Framework {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("NewDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class NewDataSet : global::System.Data.DataSet {
        
        private tagDataTable tabletag;
        
        private osmDataTable tableosm;
        
        private boundDataTable tablebound;
        
        private nodeDataTable tablenode;
        
        private wayDataTable tableway;
        
        private ndDataTable tablend;
        
        private relationDataTable tablerelation;
        
        private memberDataTable tablemember;
        
        private global::System.Data.DataRelation relationnode_tag;
        
        private global::System.Data.DataRelation relationway_tag;
        
        private global::System.Data.DataRelation relationrelation_tag;
        
        private global::System.Data.DataRelation relationosm_bound;
        
        private global::System.Data.DataRelation relationosm_node;
        
        private global::System.Data.DataRelation relationosm_way;
        
        private global::System.Data.DataRelation relationway_nd;
        
        private global::System.Data.DataRelation relationosm_relation;
        
        private global::System.Data.DataRelation relationrelation_member;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public NewDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected NewDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["tag"] != null)) {
                    base.Tables.Add(new tagDataTable(ds.Tables["tag"]));
                }
                if ((ds.Tables["osm"] != null)) {
                    base.Tables.Add(new osmDataTable(ds.Tables["osm"]));
                }
                if ((ds.Tables["bound"] != null)) {
                    base.Tables.Add(new boundDataTable(ds.Tables["bound"]));
                }
                if ((ds.Tables["node"] != null)) {
                    base.Tables.Add(new nodeDataTable(ds.Tables["node"]));
                }
                if ((ds.Tables["way"] != null)) {
                    base.Tables.Add(new wayDataTable(ds.Tables["way"]));
                }
                if ((ds.Tables["nd"] != null)) {
                    base.Tables.Add(new ndDataTable(ds.Tables["nd"]));
                }
                if ((ds.Tables["relation"] != null)) {
                    base.Tables.Add(new relationDataTable(ds.Tables["relation"]));
                }
                if ((ds.Tables["member"] != null)) {
                    base.Tables.Add(new memberDataTable(ds.Tables["member"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public tagDataTable tag {
            get {
                return this.tabletag;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public osmDataTable osm {
            get {
                return this.tableosm;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public boundDataTable bound {
            get {
                return this.tablebound;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public nodeDataTable node {
            get {
                return this.tablenode;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public wayDataTable way {
            get {
                return this.tableway;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ndDataTable nd {
            get {
                return this.tablend;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public relationDataTable relation {
            get {
                return this.tablerelation;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public memberDataTable member {
            get {
                return this.tablemember;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            NewDataSet cln = ((NewDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["tag"] != null)) {
                    base.Tables.Add(new tagDataTable(ds.Tables["tag"]));
                }
                if ((ds.Tables["osm"] != null)) {
                    base.Tables.Add(new osmDataTable(ds.Tables["osm"]));
                }
                if ((ds.Tables["bound"] != null)) {
                    base.Tables.Add(new boundDataTable(ds.Tables["bound"]));
                }
                if ((ds.Tables["node"] != null)) {
                    base.Tables.Add(new nodeDataTable(ds.Tables["node"]));
                }
                if ((ds.Tables["way"] != null)) {
                    base.Tables.Add(new wayDataTable(ds.Tables["way"]));
                }
                if ((ds.Tables["nd"] != null)) {
                    base.Tables.Add(new ndDataTable(ds.Tables["nd"]));
                }
                if ((ds.Tables["relation"] != null)) {
                    base.Tables.Add(new relationDataTable(ds.Tables["relation"]));
                }
                if ((ds.Tables["member"] != null)) {
                    base.Tables.Add(new memberDataTable(ds.Tables["member"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tabletag = ((tagDataTable)(base.Tables["tag"]));
            if ((initTable == true)) {
                if ((this.tabletag != null)) {
                    this.tabletag.InitVars();
                }
            }
            this.tableosm = ((osmDataTable)(base.Tables["osm"]));
            if ((initTable == true)) {
                if ((this.tableosm != null)) {
                    this.tableosm.InitVars();
                }
            }
            this.tablebound = ((boundDataTable)(base.Tables["bound"]));
            if ((initTable == true)) {
                if ((this.tablebound != null)) {
                    this.tablebound.InitVars();
                }
            }
            this.tablenode = ((nodeDataTable)(base.Tables["node"]));
            if ((initTable == true)) {
                if ((this.tablenode != null)) {
                    this.tablenode.InitVars();
                }
            }
            this.tableway = ((wayDataTable)(base.Tables["way"]));
            if ((initTable == true)) {
                if ((this.tableway != null)) {
                    this.tableway.InitVars();
                }
            }
            this.tablend = ((ndDataTable)(base.Tables["nd"]));
            if ((initTable == true)) {
                if ((this.tablend != null)) {
                    this.tablend.InitVars();
                }
            }
            this.tablerelation = ((relationDataTable)(base.Tables["relation"]));
            if ((initTable == true)) {
                if ((this.tablerelation != null)) {
                    this.tablerelation.InitVars();
                }
            }
            this.tablemember = ((memberDataTable)(base.Tables["member"]));
            if ((initTable == true)) {
                if ((this.tablemember != null)) {
                    this.tablemember.InitVars();
                }
            }
            this.relationnode_tag = this.Relations["node_tag"];
            this.relationway_tag = this.Relations["way_tag"];
            this.relationrelation_tag = this.Relations["relation_tag"];
            this.relationosm_bound = this.Relations["osm_bound"];
            this.relationosm_node = this.Relations["osm_node"];
            this.relationosm_way = this.Relations["osm_way"];
            this.relationway_nd = this.Relations["way_nd"];
            this.relationosm_relation = this.Relations["osm_relation"];
            this.relationrelation_member = this.Relations["relation_member"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "NewDataSet";
            this.Prefix = "";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tabletag = new tagDataTable();
            base.Tables.Add(this.tabletag);
            this.tableosm = new osmDataTable();
            base.Tables.Add(this.tableosm);
            this.tablebound = new boundDataTable();
            base.Tables.Add(this.tablebound);
            this.tablenode = new nodeDataTable();
            base.Tables.Add(this.tablenode);
            this.tableway = new wayDataTable();
            base.Tables.Add(this.tableway);
            this.tablend = new ndDataTable();
            base.Tables.Add(this.tablend);
            this.tablerelation = new relationDataTable();
            base.Tables.Add(this.tablerelation);
            this.tablemember = new memberDataTable();
            base.Tables.Add(this.tablemember);
            global::System.Data.ForeignKeyConstraint fkc;
            fkc = new global::System.Data.ForeignKeyConstraint("node_tag", new global::System.Data.DataColumn[] {
                        this.tablenode.node_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tabletag.node_IdColumn});
            this.tabletag.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("way_tag", new global::System.Data.DataColumn[] {
                        this.tableway.way_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tabletag.way_IdColumn});
            this.tabletag.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("relation_tag", new global::System.Data.DataColumn[] {
                        this.tablerelation.relation_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tabletag.relation_IdColumn});
            this.tabletag.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("osm_bound", new global::System.Data.DataColumn[] {
                        this.tableosm.osm_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablebound.osm_IdColumn});
            this.tablebound.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("osm_node", new global::System.Data.DataColumn[] {
                        this.tableosm.osm_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablenode.osm_IdColumn});
            this.tablenode.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("osm_way", new global::System.Data.DataColumn[] {
                        this.tableosm.osm_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableway.osm_IdColumn});
            this.tableway.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("way_nd", new global::System.Data.DataColumn[] {
                        this.tableway.way_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablend.way_IdColumn});
            this.tablend.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("osm_relation", new global::System.Data.DataColumn[] {
                        this.tableosm.osm_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablerelation.osm_IdColumn});
            this.tablerelation.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("relation_member", new global::System.Data.DataColumn[] {
                        this.tablerelation.relation_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablemember.relation_IdColumn});
            this.tablemember.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            this.relationnode_tag = new global::System.Data.DataRelation("node_tag", new global::System.Data.DataColumn[] {
                        this.tablenode.node_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tabletag.node_IdColumn}, false);
            this.relationnode_tag.Nested = true;
            this.Relations.Add(this.relationnode_tag);
            this.relationway_tag = new global::System.Data.DataRelation("way_tag", new global::System.Data.DataColumn[] {
                        this.tableway.way_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tabletag.way_IdColumn}, false);
            this.relationway_tag.Nested = true;
            this.Relations.Add(this.relationway_tag);
            this.relationrelation_tag = new global::System.Data.DataRelation("relation_tag", new global::System.Data.DataColumn[] {
                        this.tablerelation.relation_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tabletag.relation_IdColumn}, false);
            this.relationrelation_tag.Nested = true;
            this.Relations.Add(this.relationrelation_tag);
            this.relationosm_bound = new global::System.Data.DataRelation("osm_bound", new global::System.Data.DataColumn[] {
                        this.tableosm.osm_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablebound.osm_IdColumn}, false);
            this.relationosm_bound.Nested = true;
            this.Relations.Add(this.relationosm_bound);
            this.relationosm_node = new global::System.Data.DataRelation("osm_node", new global::System.Data.DataColumn[] {
                        this.tableosm.osm_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablenode.osm_IdColumn}, false);
            this.relationosm_node.Nested = true;
            this.Relations.Add(this.relationosm_node);
            this.relationosm_way = new global::System.Data.DataRelation("osm_way", new global::System.Data.DataColumn[] {
                        this.tableosm.osm_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableway.osm_IdColumn}, false);
            this.relationosm_way.Nested = true;
            this.Relations.Add(this.relationosm_way);
            this.relationway_nd = new global::System.Data.DataRelation("way_nd", new global::System.Data.DataColumn[] {
                        this.tableway.way_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablend.way_IdColumn}, false);
            this.relationway_nd.Nested = true;
            this.Relations.Add(this.relationway_nd);
            this.relationosm_relation = new global::System.Data.DataRelation("osm_relation", new global::System.Data.DataColumn[] {
                        this.tableosm.osm_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablerelation.osm_IdColumn}, false);
            this.relationosm_relation.Nested = true;
            this.Relations.Add(this.relationosm_relation);
            this.relationrelation_member = new global::System.Data.DataRelation("relation_member", new global::System.Data.DataColumn[] {
                        this.tablerelation.relation_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablemember.relation_IdColumn}, false);
            this.relationrelation_member.Nested = true;
            this.Relations.Add(this.relationrelation_member);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializetag() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeosm() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializebound() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializenode() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeway() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializend() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializerelation() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializemember() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            NewDataSet ds = new NewDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void tagRowChangeEventHandler(object sender, tagRowChangeEvent e);
        
        public delegate void osmRowChangeEventHandler(object sender, osmRowChangeEvent e);
        
        public delegate void boundRowChangeEventHandler(object sender, boundRowChangeEvent e);
        
        public delegate void nodeRowChangeEventHandler(object sender, nodeRowChangeEvent e);
        
        public delegate void wayRowChangeEventHandler(object sender, wayRowChangeEvent e);
        
        public delegate void ndRowChangeEventHandler(object sender, ndRowChangeEvent e);
        
        public delegate void relationRowChangeEventHandler(object sender, relationRowChangeEvent e);
        
        public delegate void memberRowChangeEventHandler(object sender, memberRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class tagDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnk;
            
            private global::System.Data.DataColumn columnv;
            
            private global::System.Data.DataColumn columnnode_Id;
            
            private global::System.Data.DataColumn columnway_Id;
            
            private global::System.Data.DataColumn columnrelation_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tagDataTable() {
                this.TableName = "tag";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tagDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected tagDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn kColumn {
                get {
                    return this.columnk;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn vColumn {
                get {
                    return this.columnv;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn node_IdColumn {
                get {
                    return this.columnnode_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn way_IdColumn {
                get {
                    return this.columnway_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn relation_IdColumn {
                get {
                    return this.columnrelation_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tagRow this[int index] {
                get {
                    return ((tagRow)(this.Rows[index]));
                }
            }
            
            public event tagRowChangeEventHandler tagRowChanging;
            
            public event tagRowChangeEventHandler tagRowChanged;
            
            public event tagRowChangeEventHandler tagRowDeleting;
            
            public event tagRowChangeEventHandler tagRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddtagRow(tagRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tagRow AddtagRow(string k, string v, nodeRow parentnodeRowBynode_tag, wayRow parentwayRowByway_tag, relationRow parentrelationRowByrelation_tag) {
                tagRow rowtagRow = ((tagRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        k,
                        v,
                        null,
                        null,
                        null};
                if ((parentnodeRowBynode_tag != null)) {
                    columnValuesArray[2] = parentnodeRowBynode_tag[7];
                }
                if ((parentwayRowByway_tag != null)) {
                    columnValuesArray[3] = parentwayRowByway_tag[5];
                }
                if ((parentrelationRowByrelation_tag != null)) {
                    columnValuesArray[4] = parentrelationRowByrelation_tag[5];
                }
                rowtagRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowtagRow);
                return rowtagRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                tagDataTable cln = ((tagDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new tagDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnk = base.Columns["k"];
                this.columnv = base.Columns["v"];
                this.columnnode_Id = base.Columns["node_Id"];
                this.columnway_Id = base.Columns["way_Id"];
                this.columnrelation_Id = base.Columns["relation_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnk = new global::System.Data.DataColumn("k", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnk);
                this.columnv = new global::System.Data.DataColumn("v", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnv);
                this.columnnode_Id = new global::System.Data.DataColumn("node_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnnode_Id);
                this.columnway_Id = new global::System.Data.DataColumn("way_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnway_Id);
                this.columnrelation_Id = new global::System.Data.DataColumn("relation_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnrelation_Id);
                this.columnk.Namespace = "";
                this.columnv.Namespace = "";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tagRow NewtagRow() {
                return ((tagRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new tagRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(tagRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.tagRowChanged != null)) {
                    this.tagRowChanged(this, new tagRowChangeEvent(((tagRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.tagRowChanging != null)) {
                    this.tagRowChanging(this, new tagRowChangeEvent(((tagRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.tagRowDeleted != null)) {
                    this.tagRowDeleted(this, new tagRowChangeEvent(((tagRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.tagRowDeleting != null)) {
                    this.tagRowDeleting(this, new tagRowChangeEvent(((tagRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovetagRow(tagRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                xs.Add(ds.GetSchemaSerializable());
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "tagDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class osmDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnversion;
            
            private global::System.Data.DataColumn columngenerator;
            
            private global::System.Data.DataColumn columnosm_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public osmDataTable() {
                this.TableName = "osm";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal osmDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected osmDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn versionColumn {
                get {
                    return this.columnversion;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn generatorColumn {
                get {
                    return this.columngenerator;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn osm_IdColumn {
                get {
                    return this.columnosm_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public osmRow this[int index] {
                get {
                    return ((osmRow)(this.Rows[index]));
                }
            }
            
            public event osmRowChangeEventHandler osmRowChanging;
            
            public event osmRowChangeEventHandler osmRowChanged;
            
            public event osmRowChangeEventHandler osmRowDeleting;
            
            public event osmRowChangeEventHandler osmRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddosmRow(osmRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public osmRow AddosmRow(string version, string generator) {
                osmRow rowosmRow = ((osmRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        version,
                        generator,
                        null};
                rowosmRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowosmRow);
                return rowosmRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                osmDataTable cln = ((osmDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new osmDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnversion = base.Columns["version"];
                this.columngenerator = base.Columns["generator"];
                this.columnosm_Id = base.Columns["osm_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnversion = new global::System.Data.DataColumn("version", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnversion);
                this.columngenerator = new global::System.Data.DataColumn("generator", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columngenerator);
                this.columnosm_Id = new global::System.Data.DataColumn("osm_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnosm_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnosm_Id}, true));
                this.columnversion.Namespace = "";
                this.columngenerator.Namespace = "";
                this.columnosm_Id.AutoIncrement = true;
                this.columnosm_Id.AllowDBNull = false;
                this.columnosm_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public osmRow NewosmRow() {
                return ((osmRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new osmRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(osmRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.osmRowChanged != null)) {
                    this.osmRowChanged(this, new osmRowChangeEvent(((osmRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.osmRowChanging != null)) {
                    this.osmRowChanging(this, new osmRowChangeEvent(((osmRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.osmRowDeleted != null)) {
                    this.osmRowDeleted(this, new osmRowChangeEvent(((osmRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.osmRowDeleting != null)) {
                    this.osmRowDeleting(this, new osmRowChangeEvent(((osmRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveosmRow(osmRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                xs.Add(ds.GetSchemaSerializable());
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "osmDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class boundDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnbox;
            
            private global::System.Data.DataColumn columnorigin;
            
            private global::System.Data.DataColumn columnosm_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public boundDataTable() {
                this.TableName = "bound";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal boundDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected boundDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn boxColumn {
                get {
                    return this.columnbox;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn originColumn {
                get {
                    return this.columnorigin;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn osm_IdColumn {
                get {
                    return this.columnosm_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public boundRow this[int index] {
                get {
                    return ((boundRow)(this.Rows[index]));
                }
            }
            
            public event boundRowChangeEventHandler boundRowChanging;
            
            public event boundRowChangeEventHandler boundRowChanged;
            
            public event boundRowChangeEventHandler boundRowDeleting;
            
            public event boundRowChangeEventHandler boundRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddboundRow(boundRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public boundRow AddboundRow(string box, string origin, osmRow parentosmRowByosm_bound) {
                boundRow rowboundRow = ((boundRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        box,
                        origin,
                        null};
                if ((parentosmRowByosm_bound != null)) {
                    columnValuesArray[2] = parentosmRowByosm_bound[2];
                }
                rowboundRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowboundRow);
                return rowboundRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                boundDataTable cln = ((boundDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new boundDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnbox = base.Columns["box"];
                this.columnorigin = base.Columns["origin"];
                this.columnosm_Id = base.Columns["osm_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnbox = new global::System.Data.DataColumn("box", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnbox);
                this.columnorigin = new global::System.Data.DataColumn("origin", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnorigin);
                this.columnosm_Id = new global::System.Data.DataColumn("osm_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnosm_Id);
                this.columnbox.Namespace = "";
                this.columnorigin.Namespace = "";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public boundRow NewboundRow() {
                return ((boundRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new boundRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(boundRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.boundRowChanged != null)) {
                    this.boundRowChanged(this, new boundRowChangeEvent(((boundRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.boundRowChanging != null)) {
                    this.boundRowChanging(this, new boundRowChangeEvent(((boundRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.boundRowDeleted != null)) {
                    this.boundRowDeleted(this, new boundRowChangeEvent(((boundRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.boundRowDeleting != null)) {
                    this.boundRowDeleting(this, new boundRowChangeEvent(((boundRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveboundRow(boundRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                xs.Add(ds.GetSchemaSerializable());
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "boundDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class nodeDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnid;
            
            private global::System.Data.DataColumn columntimestamp;
            
            private global::System.Data.DataColumn columnuser;
            
            private global::System.Data.DataColumn columnvisible;
            
            private global::System.Data.DataColumn columnlat;
            
            private global::System.Data.DataColumn columnlon;
            
            private global::System.Data.DataColumn columnaction;
            
            private global::System.Data.DataColumn columnnode_Id;
            
            private global::System.Data.DataColumn columnosm_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public nodeDataTable() {
                this.TableName = "node";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal nodeDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected nodeDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn timestampColumn {
                get {
                    return this.columntimestamp;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn userColumn {
                get {
                    return this.columnuser;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn visibleColumn {
                get {
                    return this.columnvisible;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn latColumn {
                get {
                    return this.columnlat;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn lonColumn {
                get {
                    return this.columnlon;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn actionColumn {
                get {
                    return this.columnaction;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn node_IdColumn {
                get {
                    return this.columnnode_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn osm_IdColumn {
                get {
                    return this.columnosm_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public nodeRow this[int index] {
                get {
                    return ((nodeRow)(this.Rows[index]));
                }
            }
            
            public event nodeRowChangeEventHandler nodeRowChanging;
            
            public event nodeRowChangeEventHandler nodeRowChanged;
            
            public event nodeRowChangeEventHandler nodeRowDeleting;
            
            public event nodeRowChangeEventHandler nodeRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddnodeRow(nodeRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public nodeRow AddnodeRow(int id, string timestamp, string user, bool visible, double lat, double lon, string action, osmRow parentosmRowByosm_node) {
                nodeRow rownodeRow = ((nodeRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        id,
                        timestamp,
                        user,
                        visible,
                        lat,
                        lon,
                        action,
                        null,
                        null};
                if ((parentosmRowByosm_node != null)) {
                    columnValuesArray[8] = parentosmRowByosm_node[2];
                }
                rownodeRow.ItemArray = columnValuesArray;
                this.Rows.Add(rownodeRow);
                return rownodeRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                nodeDataTable cln = ((nodeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new nodeDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnid = base.Columns["id"];
                this.columntimestamp = base.Columns["timestamp"];
                this.columnuser = base.Columns["user"];
                this.columnvisible = base.Columns["visible"];
                this.columnlat = base.Columns["lat"];
                this.columnlon = base.Columns["lon"];
                this.columnaction = base.Columns["action"];
                this.columnnode_Id = base.Columns["node_Id"];
                this.columnosm_Id = base.Columns["osm_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnid = new global::System.Data.DataColumn("id", typeof(int), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnid);
                this.columntimestamp = new global::System.Data.DataColumn("timestamp", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columntimestamp);
                this.columnuser = new global::System.Data.DataColumn("user", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnuser);
                this.columnvisible = new global::System.Data.DataColumn("visible", typeof(bool), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnvisible);
                this.columnlat = new global::System.Data.DataColumn("lat", typeof(double), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnlat);
                this.columnlon = new global::System.Data.DataColumn("lon", typeof(double), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnlon);
                this.columnaction = new global::System.Data.DataColumn("action", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnaction);
                this.columnnode_Id = new global::System.Data.DataColumn("node_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnnode_Id);
                this.columnosm_Id = new global::System.Data.DataColumn("osm_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnosm_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnnode_Id}, true));
                this.columnid.Namespace = "";
                this.columntimestamp.Namespace = "";
                this.columnuser.Namespace = "";
                this.columnvisible.Namespace = "";
                this.columnlat.Namespace = "";
                this.columnlon.Namespace = "";
                this.columnaction.Namespace = "";
                this.columnnode_Id.AutoIncrement = true;
                this.columnnode_Id.AllowDBNull = false;
                this.columnnode_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public nodeRow NewnodeRow() {
                return ((nodeRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new nodeRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(nodeRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.nodeRowChanged != null)) {
                    this.nodeRowChanged(this, new nodeRowChangeEvent(((nodeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.nodeRowChanging != null)) {
                    this.nodeRowChanging(this, new nodeRowChangeEvent(((nodeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.nodeRowDeleted != null)) {
                    this.nodeRowDeleted(this, new nodeRowChangeEvent(((nodeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.nodeRowDeleting != null)) {
                    this.nodeRowDeleting(this, new nodeRowChangeEvent(((nodeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovenodeRow(nodeRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                xs.Add(ds.GetSchemaSerializable());
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "nodeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class wayDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnid;
            
            private global::System.Data.DataColumn columntimestamp;
            
            private global::System.Data.DataColumn columnuser;
            
            private global::System.Data.DataColumn columnvisible;
            
            private global::System.Data.DataColumn columnaction;
            
            private global::System.Data.DataColumn columnway_Id;
            
            private global::System.Data.DataColumn columnosm_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public wayDataTable() {
                this.TableName = "way";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal wayDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected wayDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn timestampColumn {
                get {
                    return this.columntimestamp;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn userColumn {
                get {
                    return this.columnuser;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn visibleColumn {
                get {
                    return this.columnvisible;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn actionColumn {
                get {
                    return this.columnaction;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn way_IdColumn {
                get {
                    return this.columnway_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn osm_IdColumn {
                get {
                    return this.columnosm_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public wayRow this[int index] {
                get {
                    return ((wayRow)(this.Rows[index]));
                }
            }
            
            public event wayRowChangeEventHandler wayRowChanging;
            
            public event wayRowChangeEventHandler wayRowChanged;
            
            public event wayRowChangeEventHandler wayRowDeleting;
            
            public event wayRowChangeEventHandler wayRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddwayRow(wayRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public wayRow AddwayRow(int id, string timestamp, string user, bool visible, string action, osmRow parentosmRowByosm_way) {
                wayRow rowwayRow = ((wayRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        id,
                        timestamp,
                        user,
                        visible,
                        action,
                        null,
                        null};
                if ((parentosmRowByosm_way != null)) {
                    columnValuesArray[6] = parentosmRowByosm_way[2];
                }
                rowwayRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowwayRow);
                return rowwayRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                wayDataTable cln = ((wayDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new wayDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnid = base.Columns["id"];
                this.columntimestamp = base.Columns["timestamp"];
                this.columnuser = base.Columns["user"];
                this.columnvisible = base.Columns["visible"];
                this.columnaction = base.Columns["action"];
                this.columnway_Id = base.Columns["way_Id"];
                this.columnosm_Id = base.Columns["osm_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnid = new global::System.Data.DataColumn("id", typeof(int), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnid);
                this.columntimestamp = new global::System.Data.DataColumn("timestamp", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columntimestamp);
                this.columnuser = new global::System.Data.DataColumn("user", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnuser);
                this.columnvisible = new global::System.Data.DataColumn("visible", typeof(bool), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnvisible);
                this.columnaction = new global::System.Data.DataColumn("action", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnaction);
                this.columnway_Id = new global::System.Data.DataColumn("way_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnway_Id);
                this.columnosm_Id = new global::System.Data.DataColumn("osm_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnosm_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnway_Id}, true));
                this.columnid.Namespace = "";
                this.columntimestamp.Namespace = "";
                this.columnuser.Namespace = "";
                this.columnvisible.Namespace = "";
                this.columnaction.Namespace = "";
                this.columnway_Id.AutoIncrement = true;
                this.columnway_Id.AllowDBNull = false;
                this.columnway_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public wayRow NewwayRow() {
                return ((wayRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new wayRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(wayRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.wayRowChanged != null)) {
                    this.wayRowChanged(this, new wayRowChangeEvent(((wayRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.wayRowChanging != null)) {
                    this.wayRowChanging(this, new wayRowChangeEvent(((wayRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.wayRowDeleted != null)) {
                    this.wayRowDeleted(this, new wayRowChangeEvent(((wayRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.wayRowDeleting != null)) {
                    this.wayRowDeleting(this, new wayRowChangeEvent(((wayRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovewayRow(wayRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                xs.Add(ds.GetSchemaSerializable());
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "wayDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ndDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn column_ref;
            
            private global::System.Data.DataColumn columnway_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ndDataTable() {
                this.TableName = "nd";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ndDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ndDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _refColumn {
                get {
                    return this.column_ref;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn way_IdColumn {
                get {
                    return this.columnway_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ndRow this[int index] {
                get {
                    return ((ndRow)(this.Rows[index]));
                }
            }
            
            public event ndRowChangeEventHandler ndRowChanging;
            
            public event ndRowChangeEventHandler ndRowChanged;
            
            public event ndRowChangeEventHandler ndRowDeleting;
            
            public event ndRowChangeEventHandler ndRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddndRow(ndRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ndRow AddndRow(int _ref, wayRow parentwayRowByway_nd) {
                ndRow rowndRow = ((ndRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        _ref,
                        null};
                if ((parentwayRowByway_nd != null)) {
                    columnValuesArray[1] = parentwayRowByway_nd[5];
                }
                rowndRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowndRow);
                return rowndRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ndDataTable cln = ((ndDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ndDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.column_ref = base.Columns["ref"];
                this.columnway_Id = base.Columns["way_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.column_ref = new global::System.Data.DataColumn("ref", typeof(int), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.column_ref);
                this.columnway_Id = new global::System.Data.DataColumn("way_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnway_Id);
                this.column_ref.Namespace = "";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ndRow NewndRow() {
                return ((ndRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ndRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ndRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ndRowChanged != null)) {
                    this.ndRowChanged(this, new ndRowChangeEvent(((ndRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ndRowChanging != null)) {
                    this.ndRowChanging(this, new ndRowChangeEvent(((ndRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ndRowDeleted != null)) {
                    this.ndRowDeleted(this, new ndRowChangeEvent(((ndRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ndRowDeleting != null)) {
                    this.ndRowDeleting(this, new ndRowChangeEvent(((ndRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovendRow(ndRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                xs.Add(ds.GetSchemaSerializable());
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ndDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class relationDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnid;
            
            private global::System.Data.DataColumn columntimestamp;
            
            private global::System.Data.DataColumn columnuser;
            
            private global::System.Data.DataColumn columnvisible;
            
            private global::System.Data.DataColumn columnaction;
            
            private global::System.Data.DataColumn columnrelation_Id;
            
            private global::System.Data.DataColumn columnosm_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public relationDataTable() {
                this.TableName = "relation";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal relationDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected relationDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn timestampColumn {
                get {
                    return this.columntimestamp;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn userColumn {
                get {
                    return this.columnuser;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn visibleColumn {
                get {
                    return this.columnvisible;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn actionColumn {
                get {
                    return this.columnaction;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn relation_IdColumn {
                get {
                    return this.columnrelation_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn osm_IdColumn {
                get {
                    return this.columnosm_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public relationRow this[int index] {
                get {
                    return ((relationRow)(this.Rows[index]));
                }
            }
            
            public event relationRowChangeEventHandler relationRowChanging;
            
            public event relationRowChangeEventHandler relationRowChanged;
            
            public event relationRowChangeEventHandler relationRowDeleting;
            
            public event relationRowChangeEventHandler relationRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddrelationRow(relationRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public relationRow AddrelationRow(int id, string timestamp, string user, bool visible, string action, osmRow parentosmRowByosm_relation) {
                relationRow rowrelationRow = ((relationRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        id,
                        timestamp,
                        user,
                        visible,
                        action,
                        null,
                        null};
                if ((parentosmRowByosm_relation != null)) {
                    columnValuesArray[6] = parentosmRowByosm_relation[2];
                }
                rowrelationRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowrelationRow);
                return rowrelationRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                relationDataTable cln = ((relationDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new relationDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnid = base.Columns["id"];
                this.columntimestamp = base.Columns["timestamp"];
                this.columnuser = base.Columns["user"];
                this.columnvisible = base.Columns["visible"];
                this.columnaction = base.Columns["action"];
                this.columnrelation_Id = base.Columns["relation_Id"];
                this.columnosm_Id = base.Columns["osm_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnid = new global::System.Data.DataColumn("id", typeof(int), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnid);
                this.columntimestamp = new global::System.Data.DataColumn("timestamp", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columntimestamp);
                this.columnuser = new global::System.Data.DataColumn("user", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnuser);
                this.columnvisible = new global::System.Data.DataColumn("visible", typeof(bool), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnvisible);
                this.columnaction = new global::System.Data.DataColumn("action", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnaction);
                this.columnrelation_Id = new global::System.Data.DataColumn("relation_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnrelation_Id);
                this.columnosm_Id = new global::System.Data.DataColumn("osm_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnosm_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnrelation_Id}, true));
                this.columnid.Namespace = "";
                this.columntimestamp.Namespace = "";
                this.columnuser.Namespace = "";
                this.columnvisible.Namespace = "";
                this.columnaction.Namespace = "";
                this.columnrelation_Id.AutoIncrement = true;
                this.columnrelation_Id.AllowDBNull = false;
                this.columnrelation_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public relationRow NewrelationRow() {
                return ((relationRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new relationRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(relationRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.relationRowChanged != null)) {
                    this.relationRowChanged(this, new relationRowChangeEvent(((relationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.relationRowChanging != null)) {
                    this.relationRowChanging(this, new relationRowChangeEvent(((relationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.relationRowDeleted != null)) {
                    this.relationRowDeleted(this, new relationRowChangeEvent(((relationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.relationRowDeleting != null)) {
                    this.relationRowDeleting(this, new relationRowChangeEvent(((relationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoverelationRow(relationRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                xs.Add(ds.GetSchemaSerializable());
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "relationDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class memberDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columntype;
            
            private global::System.Data.DataColumn column_ref;
            
            private global::System.Data.DataColumn columnrole;
            
            private global::System.Data.DataColumn columnrelation_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public memberDataTable() {
                this.TableName = "member";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal memberDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected memberDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn typeColumn {
                get {
                    return this.columntype;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _refColumn {
                get {
                    return this.column_ref;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn roleColumn {
                get {
                    return this.columnrole;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn relation_IdColumn {
                get {
                    return this.columnrelation_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public memberRow this[int index] {
                get {
                    return ((memberRow)(this.Rows[index]));
                }
            }
            
            public event memberRowChangeEventHandler memberRowChanging;
            
            public event memberRowChangeEventHandler memberRowChanged;
            
            public event memberRowChangeEventHandler memberRowDeleting;
            
            public event memberRowChangeEventHandler memberRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddmemberRow(memberRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public memberRow AddmemberRow(string type, int _ref, string role, relationRow parentrelationRowByrelation_member) {
                memberRow rowmemberRow = ((memberRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        type,
                        _ref,
                        role,
                        null};
                if ((parentrelationRowByrelation_member != null)) {
                    columnValuesArray[3] = parentrelationRowByrelation_member[5];
                }
                rowmemberRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowmemberRow);
                return rowmemberRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                memberDataTable cln = ((memberDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new memberDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columntype = base.Columns["type"];
                this.column_ref = base.Columns["ref"];
                this.columnrole = base.Columns["role"];
                this.columnrelation_Id = base.Columns["relation_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columntype = new global::System.Data.DataColumn("type", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columntype);
                this.column_ref = new global::System.Data.DataColumn("ref", typeof(int), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.column_ref);
                this.columnrole = new global::System.Data.DataColumn("role", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnrole);
                this.columnrelation_Id = new global::System.Data.DataColumn("relation_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnrelation_Id);
                this.columntype.Namespace = "";
                this.column_ref.Namespace = "";
                this.columnrole.Namespace = "";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public memberRow NewmemberRow() {
                return ((memberRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new memberRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(memberRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.memberRowChanged != null)) {
                    this.memberRowChanged(this, new memberRowChangeEvent(((memberRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.memberRowChanging != null)) {
                    this.memberRowChanging(this, new memberRowChangeEvent(((memberRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.memberRowDeleted != null)) {
                    this.memberRowDeleted(this, new memberRowChangeEvent(((memberRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.memberRowDeleting != null)) {
                    this.memberRowDeleting(this, new memberRowChangeEvent(((memberRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovememberRow(memberRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                xs.Add(ds.GetSchemaSerializable());
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "memberDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class tagRow : global::System.Data.DataRow {
            
            private tagDataTable tabletag;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tagRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabletag = ((tagDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string k {
                get {
                    try {
                        return ((string)(this[this.tabletag.kColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'k\' in table \'tag\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletag.kColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string v {
                get {
                    try {
                        return ((string)(this[this.tabletag.vColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'v\' in table \'tag\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletag.vColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int node_Id {
                get {
                    try {
                        return ((int)(this[this.tabletag.node_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'node_Id\' in table \'tag\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletag.node_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int way_Id {
                get {
                    try {
                        return ((int)(this[this.tabletag.way_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'way_Id\' in table \'tag\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletag.way_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int relation_Id {
                get {
                    try {
                        return ((int)(this[this.tabletag.relation_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'relation_Id\' in table \'tag\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletag.relation_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public nodeRow nodeRow {
                get {
                    return ((nodeRow)(this.GetParentRow(this.Table.ParentRelations["node_tag"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["node_tag"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public wayRow wayRow {
                get {
                    return ((wayRow)(this.GetParentRow(this.Table.ParentRelations["way_tag"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["way_tag"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public relationRow relationRow {
                get {
                    return ((relationRow)(this.GetParentRow(this.Table.ParentRelations["relation_tag"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["relation_tag"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IskNull() {
                return this.IsNull(this.tabletag.kColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetkNull() {
                this[this.tabletag.kColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsvNull() {
                return this.IsNull(this.tabletag.vColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetvNull() {
                this[this.tabletag.vColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isnode_IdNull() {
                return this.IsNull(this.tabletag.node_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setnode_IdNull() {
                this[this.tabletag.node_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isway_IdNull() {
                return this.IsNull(this.tabletag.way_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setway_IdNull() {
                this[this.tabletag.way_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isrelation_IdNull() {
                return this.IsNull(this.tabletag.relation_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setrelation_IdNull() {
                this[this.tabletag.relation_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class osmRow : global::System.Data.DataRow {
            
            private osmDataTable tableosm;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal osmRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableosm = ((osmDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string version {
                get {
                    try {
                        return ((string)(this[this.tableosm.versionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'version\' in table \'osm\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableosm.versionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string generator {
                get {
                    try {
                        return ((string)(this[this.tableosm.generatorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'generator\' in table \'osm\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableosm.generatorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int osm_Id {
                get {
                    return ((int)(this[this.tableosm.osm_IdColumn]));
                }
                set {
                    this[this.tableosm.osm_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsversionNull() {
                return this.IsNull(this.tableosm.versionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetversionNull() {
                this[this.tableosm.versionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsgeneratorNull() {
                return this.IsNull(this.tableosm.generatorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetgeneratorNull() {
                this[this.tableosm.generatorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public boundRow[] GetboundRows() {
                if ((this.Table.ChildRelations["osm_bound"] == null)) {
                    return new boundRow[0];
                }
                else {
                    return ((boundRow[])(base.GetChildRows(this.Table.ChildRelations["osm_bound"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public nodeRow[] GetnodeRows() {
                if ((this.Table.ChildRelations["osm_node"] == null)) {
                    return new nodeRow[0];
                }
                else {
                    return ((nodeRow[])(base.GetChildRows(this.Table.ChildRelations["osm_node"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public wayRow[] GetwayRows() {
                if ((this.Table.ChildRelations["osm_way"] == null)) {
                    return new wayRow[0];
                }
                else {
                    return ((wayRow[])(base.GetChildRows(this.Table.ChildRelations["osm_way"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public relationRow[] GetrelationRows() {
                if ((this.Table.ChildRelations["osm_relation"] == null)) {
                    return new relationRow[0];
                }
                else {
                    return ((relationRow[])(base.GetChildRows(this.Table.ChildRelations["osm_relation"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class boundRow : global::System.Data.DataRow {
            
            private boundDataTable tablebound;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal boundRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablebound = ((boundDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string box {
                get {
                    try {
                        return ((string)(this[this.tablebound.boxColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'box\' in table \'bound\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablebound.boxColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string origin {
                get {
                    try {
                        return ((string)(this[this.tablebound.originColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'origin\' in table \'bound\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablebound.originColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int osm_Id {
                get {
                    try {
                        return ((int)(this[this.tablebound.osm_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'osm_Id\' in table \'bound\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablebound.osm_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public osmRow osmRow {
                get {
                    return ((osmRow)(this.GetParentRow(this.Table.ParentRelations["osm_bound"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["osm_bound"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsboxNull() {
                return this.IsNull(this.tablebound.boxColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetboxNull() {
                this[this.tablebound.boxColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsoriginNull() {
                return this.IsNull(this.tablebound.originColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetoriginNull() {
                this[this.tablebound.originColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isosm_IdNull() {
                return this.IsNull(this.tablebound.osm_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setosm_IdNull() {
                this[this.tablebound.osm_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class nodeRow : global::System.Data.DataRow {
            
            private nodeDataTable tablenode;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal nodeRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablenode = ((nodeDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int id {
                get {
                    try {
                        return ((int)(this[this.tablenode.idColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'id\' in table \'node\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablenode.idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string timestamp {
                get {
                    try {
                        return ((string)(this[this.tablenode.timestampColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'timestamp\' in table \'node\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablenode.timestampColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string user {
                get {
                    try {
                        return ((string)(this[this.tablenode.userColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'user\' in table \'node\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablenode.userColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool visible {
                get {
                    try {
                        return ((bool)(this[this.tablenode.visibleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'visible\' in table \'node\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablenode.visibleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double lat {
                get {
                    try {
                        return ((double)(this[this.tablenode.latColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'lat\' in table \'node\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablenode.latColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double lon {
                get {
                    try {
                        return ((double)(this[this.tablenode.lonColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'lon\' in table \'node\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablenode.lonColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string action {
                get {
                    try {
                        return ((string)(this[this.tablenode.actionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'action\' in table \'node\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablenode.actionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int node_Id {
                get {
                    return ((int)(this[this.tablenode.node_IdColumn]));
                }
                set {
                    this[this.tablenode.node_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int osm_Id {
                get {
                    try {
                        return ((int)(this[this.tablenode.osm_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'osm_Id\' in table \'node\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablenode.osm_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public osmRow osmRow {
                get {
                    return ((osmRow)(this.GetParentRow(this.Table.ParentRelations["osm_node"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["osm_node"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsidNull() {
                return this.IsNull(this.tablenode.idColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetidNull() {
                this[this.tablenode.idColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstimestampNull() {
                return this.IsNull(this.tablenode.timestampColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettimestampNull() {
                this[this.tablenode.timestampColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsuserNull() {
                return this.IsNull(this.tablenode.userColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetuserNull() {
                this[this.tablenode.userColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsvisibleNull() {
                return this.IsNull(this.tablenode.visibleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetvisibleNull() {
                this[this.tablenode.visibleColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IslatNull() {
                return this.IsNull(this.tablenode.latColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetlatNull() {
                this[this.tablenode.latColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IslonNull() {
                return this.IsNull(this.tablenode.lonColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetlonNull() {
                this[this.tablenode.lonColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsactionNull() {
                return this.IsNull(this.tablenode.actionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetactionNull() {
                this[this.tablenode.actionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isosm_IdNull() {
                return this.IsNull(this.tablenode.osm_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setosm_IdNull() {
                this[this.tablenode.osm_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tagRow[] GettagRows() {
                if ((this.Table.ChildRelations["node_tag"] == null)) {
                    return new tagRow[0];
                }
                else {
                    return ((tagRow[])(base.GetChildRows(this.Table.ChildRelations["node_tag"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class wayRow : global::System.Data.DataRow {
            
            private wayDataTable tableway;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal wayRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableway = ((wayDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int id {
                get {
                    try {
                        return ((int)(this[this.tableway.idColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'id\' in table \'way\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableway.idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string timestamp {
                get {
                    try {
                        return ((string)(this[this.tableway.timestampColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'timestamp\' in table \'way\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableway.timestampColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string user {
                get {
                    try {
                        return ((string)(this[this.tableway.userColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'user\' in table \'way\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableway.userColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool visible {
                get {
                    try {
                        return ((bool)(this[this.tableway.visibleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'visible\' in table \'way\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableway.visibleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string action {
                get {
                    try {
                        return ((string)(this[this.tableway.actionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'action\' in table \'way\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableway.actionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int way_Id {
                get {
                    return ((int)(this[this.tableway.way_IdColumn]));
                }
                set {
                    this[this.tableway.way_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int osm_Id {
                get {
                    try {
                        return ((int)(this[this.tableway.osm_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'osm_Id\' in table \'way\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableway.osm_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public osmRow osmRow {
                get {
                    return ((osmRow)(this.GetParentRow(this.Table.ParentRelations["osm_way"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["osm_way"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsidNull() {
                return this.IsNull(this.tableway.idColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetidNull() {
                this[this.tableway.idColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstimestampNull() {
                return this.IsNull(this.tableway.timestampColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettimestampNull() {
                this[this.tableway.timestampColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsuserNull() {
                return this.IsNull(this.tableway.userColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetuserNull() {
                this[this.tableway.userColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsvisibleNull() {
                return this.IsNull(this.tableway.visibleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetvisibleNull() {
                this[this.tableway.visibleColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsactionNull() {
                return this.IsNull(this.tableway.actionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetactionNull() {
                this[this.tableway.actionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isosm_IdNull() {
                return this.IsNull(this.tableway.osm_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setosm_IdNull() {
                this[this.tableway.osm_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ndRow[] GetndRows() {
                if ((this.Table.ChildRelations["way_nd"] == null)) {
                    return new ndRow[0];
                }
                else {
                    return ((ndRow[])(base.GetChildRows(this.Table.ChildRelations["way_nd"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tagRow[] GettagRows() {
                if ((this.Table.ChildRelations["way_tag"] == null)) {
                    return new tagRow[0];
                }
                else {
                    return ((tagRow[])(base.GetChildRows(this.Table.ChildRelations["way_tag"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ndRow : global::System.Data.DataRow {
            
            private ndDataTable tablend;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ndRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablend = ((ndDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int _ref {
                get {
                    try {
                        return ((int)(this[this.tablend._refColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ref\' in table \'nd\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablend._refColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int way_Id {
                get {
                    try {
                        return ((int)(this[this.tablend.way_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'way_Id\' in table \'nd\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablend.way_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public wayRow wayRow {
                get {
                    return ((wayRow)(this.GetParentRow(this.Table.ParentRelations["way_nd"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["way_nd"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_refNull() {
                return this.IsNull(this.tablend._refColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_refNull() {
                this[this.tablend._refColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isway_IdNull() {
                return this.IsNull(this.tablend.way_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setway_IdNull() {
                this[this.tablend.way_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class relationRow : global::System.Data.DataRow {
            
            private relationDataTable tablerelation;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal relationRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablerelation = ((relationDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int id {
                get {
                    try {
                        return ((int)(this[this.tablerelation.idColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'id\' in table \'relation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablerelation.idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string timestamp {
                get {
                    try {
                        return ((string)(this[this.tablerelation.timestampColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'timestamp\' in table \'relation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablerelation.timestampColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string user {
                get {
                    try {
                        return ((string)(this[this.tablerelation.userColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'user\' in table \'relation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablerelation.userColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool visible {
                get {
                    try {
                        return ((bool)(this[this.tablerelation.visibleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'visible\' in table \'relation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablerelation.visibleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string action {
                get {
                    try {
                        return ((string)(this[this.tablerelation.actionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'action\' in table \'relation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablerelation.actionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int relation_Id {
                get {
                    return ((int)(this[this.tablerelation.relation_IdColumn]));
                }
                set {
                    this[this.tablerelation.relation_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int osm_Id {
                get {
                    try {
                        return ((int)(this[this.tablerelation.osm_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'osm_Id\' in table \'relation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablerelation.osm_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public osmRow osmRow {
                get {
                    return ((osmRow)(this.GetParentRow(this.Table.ParentRelations["osm_relation"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["osm_relation"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsidNull() {
                return this.IsNull(this.tablerelation.idColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetidNull() {
                this[this.tablerelation.idColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstimestampNull() {
                return this.IsNull(this.tablerelation.timestampColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettimestampNull() {
                this[this.tablerelation.timestampColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsuserNull() {
                return this.IsNull(this.tablerelation.userColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetuserNull() {
                this[this.tablerelation.userColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsvisibleNull() {
                return this.IsNull(this.tablerelation.visibleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetvisibleNull() {
                this[this.tablerelation.visibleColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsactionNull() {
                return this.IsNull(this.tablerelation.actionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetactionNull() {
                this[this.tablerelation.actionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isosm_IdNull() {
                return this.IsNull(this.tablerelation.osm_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setosm_IdNull() {
                this[this.tablerelation.osm_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public memberRow[] GetmemberRows() {
                if ((this.Table.ChildRelations["relation_member"] == null)) {
                    return new memberRow[0];
                }
                else {
                    return ((memberRow[])(base.GetChildRows(this.Table.ChildRelations["relation_member"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tagRow[] GettagRows() {
                if ((this.Table.ChildRelations["relation_tag"] == null)) {
                    return new tagRow[0];
                }
                else {
                    return ((tagRow[])(base.GetChildRows(this.Table.ChildRelations["relation_tag"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class memberRow : global::System.Data.DataRow {
            
            private memberDataTable tablemember;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal memberRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablemember = ((memberDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string type {
                get {
                    try {
                        return ((string)(this[this.tablemember.typeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'type\' in table \'member\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemember.typeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int _ref {
                get {
                    try {
                        return ((int)(this[this.tablemember._refColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ref\' in table \'member\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemember._refColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string role {
                get {
                    try {
                        return ((string)(this[this.tablemember.roleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'role\' in table \'member\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemember.roleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int relation_Id {
                get {
                    try {
                        return ((int)(this[this.tablemember.relation_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'relation_Id\' in table \'member\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemember.relation_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public relationRow relationRow {
                get {
                    return ((relationRow)(this.GetParentRow(this.Table.ParentRelations["relation_member"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["relation_member"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstypeNull() {
                return this.IsNull(this.tablemember.typeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettypeNull() {
                this[this.tablemember.typeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_refNull() {
                return this.IsNull(this.tablemember._refColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_refNull() {
                this[this.tablemember._refColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsroleNull() {
                return this.IsNull(this.tablemember.roleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetroleNull() {
                this[this.tablemember.roleColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isrelation_IdNull() {
                return this.IsNull(this.tablemember.relation_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setrelation_IdNull() {
                this[this.tablemember.relation_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class tagRowChangeEvent : global::System.EventArgs {
            
            private tagRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tagRowChangeEvent(tagRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tagRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class osmRowChangeEvent : global::System.EventArgs {
            
            private osmRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public osmRowChangeEvent(osmRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public osmRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class boundRowChangeEvent : global::System.EventArgs {
            
            private boundRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public boundRowChangeEvent(boundRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public boundRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class nodeRowChangeEvent : global::System.EventArgs {
            
            private nodeRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public nodeRowChangeEvent(nodeRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public nodeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class wayRowChangeEvent : global::System.EventArgs {
            
            private wayRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public wayRowChangeEvent(wayRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public wayRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ndRowChangeEvent : global::System.EventArgs {
            
            private ndRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ndRowChangeEvent(ndRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ndRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class relationRowChangeEvent : global::System.EventArgs {
            
            private relationRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public relationRowChangeEvent(relationRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public relationRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class memberRowChangeEvent : global::System.EventArgs {
            
            private memberRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public memberRowChangeEvent(memberRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public memberRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591
<?xml version="1.0" encoding="utf-8" ?>
<project name="Osmosis" default="all" basedir=".">
	<description>
		Builds the Osmosis data replication library.
	</description>
	
	<!-- set global properties for this build -->
	<property name="project.name" value="osmosis"/>
	<property name="project.version" value="0.27.1"/>
	
	<!-- Define a classpath containing all lib jars. -->
	<path id="libclasspath">
		<fileset dir="lib" includes="**/*.jar"/>
	</path>
	
	<target name="init" description="Perform initialisation required by all other build steps.">
		<!-- Create the time stamp -->
		<tstamp/>
	</target>	
	
	<target name="build_src" depends="init" description="Compile source code into class files.">
		<!-- Update the version number in the main class. -->
		<replaceregexp
			byline="true"
			file="src/com/bretth/osmosis/core/OsmosisConstants.java"
			match="static final String VERSION = &quot;(.*)&quot;"
			replace="static final String VERSION = &quot;${project.version}&quot;"
		/>
		<!-- Create the build directory structure. -->
		<mkdir dir="build"/>
		<mkdir dir="build/src"/>
		<!-- Compile the java code from src into build/src -->
		<javac srcdir="src" destdir="build/src" debug="on" debuglevel="lines,vars,source" classpathref="libclasspath"/>
		<!-- Copy all resource files from src into build/src -->
		<copy todir="build/src">
			<fileset dir="src">
				<exclude name="**/*.java"/>
			</fileset>
		</copy>
		<!-- Put a version number file in the build/src directory. -->
		<touch file="build/src/version-${project.version}"/>
	</target>
	
	<target name="build_test" depends="build_src" description="Compile test source code into class files.">
		<!-- Create the build directory structure. -->
		<mkdir dir="build/test"/>
		<mkdir dir="build/test/java"/>
		<mkdir dir="build/test/data/input"/>
		<mkdir dir="build/test/data/output"/>
		
		<!-- Compile the java test code with the main project classes as a dependency. -->
		<javac srcdir="test" destdir="build/test/java" debug="on" debuglevel="lines,vars,source">
			<classpath>
				<path refid="libclasspath"/>
				<path location="build/src"/>
			</classpath>
		</javac>
			
		<!-- Copy the test data into the test data input directory -->
		<copy todir="build/test/data/input">
			<fileset dir="test/data/template"/>
		</copy>
	</target>
	
	<target name="build_binary" depends="build_src" description="Generates the binaries for the distribution.">
		<!-- Create the binary directory -->
		<mkdir dir="build/binary"/>
		
		<!-- Create a manifest for the jar file. -->
		<manifest file="build/binary/jar.txt">
			<attribute name="Main-Class" value="com.bretth.osmosis.core.Osmosis"/>
			<attribute name="Built-By" value="${user.name}"/>
			<attribute name="Implementation-Title" value="Osmosis Library"/>
			<attribute name="Implementation-Version" value="${project.version} (${TODAY})"/> 
			<attribute name="Implementation-Vendor" value="Brett Henderson"/>
		</manifest>
		
		<!-- Create the jar archive. -->
		<jar
			destfile="build/binary/${project.name}.jar"
			basedir="build/src"
			manifest="build/binary/jar.txt"/>
	</target>
	
	<!-- Produces javadoc output from the source code. -->
	<target name="javadoc" depends="init" description="Products javadoc documentation from the source code.">
		<javadoc packagenames="*" sourcepath="src" destdir="doc/api" classpathref="libclasspath"/>
	</target>
	
	<target name="dist" depends="build_binary,javadoc" description="Generate the distribution.">
		<!-- Copy the documentation into the distribution. -->
		<copy todir="build/dist/doc">
			<fileset dir="doc"/>
		</copy>
		
		<!-- Copy the source into the distribution. -->
		<copy todir="build/dist/src">
			<fileset dir="src"/>
		</copy>
		
		<!-- Copy the tests into the distribution. -->
		<copy todir="build/dist/test">
			<fileset dir="test"/>
		</copy>
		
		<!-- Copy the libraries into the distribution. -->
		<copy todir="build/dist/lib">
			<fileset dir="lib"/>
		</copy>
		
		<!-- Copy the binaries into the distribution. -->
		<copy todir="build/dist">
			<fileset dir="build/binary">
				<include name="**/*.jar"/>
			</fileset>
		</copy>
		
		<!-- Copy binary launch scripts into the distribution. -->
		<copy todir="build/dist/bin">
			<fileset dir="bin"/>
		</copy>
		
		<!-- Copy utility scripts into the distribution. -->
		<copy todir="build/dist/script">
			<fileset dir="script"/>
		</copy>
		
		<!-- Copy readme file. -->
		<copy todir="build/dist" file="readme.txt"/>
		<!-- Copy changes file. -->
		<copy todir="build/dist" file="changes.txt"/>
		<!-- Copy build script. -->
		<copy todir="build/dist" file="build.xml"/>
		<!-- Copy copying.txt file. -->
		<copy todir="build/dist" file="copying.txt"/>
		<!-- Copy gpl.txt file. -->
		<copy todir="build/dist" file="gpl.txt"/>
		
		<!-- Create the distribution zip file. -->
		<mkdir dir="dist"/>
		<zip destfile="dist/${project.name}-${project.version}.zip">
			<zipfileset prefix="${project.name}-${project.version}" dir="build/dist"/>
		</zip>
	</target>
	
	<!-- Runs all of the unit tests in the application.  Uses the AllTests suite to achieve this. -->
	<target name="test" depends="build_test" description="Run automated test cases.">
		<junit fork="yes" maxmemory="512m" printsummary="on" haltonerror="on" haltonfailure="on" filtertrace="on">
			<formatter type="plain" usefile="true"/>
			<classpath>
				<path refid="libclasspath"/>
				<path location="build/src"/>
				<path location="build/test/java"/>
			</classpath>
			<batchtest todir="build/test">
				<fileset dir="build/test/java">
					<include name="**/*Test*.class"/>
					<exclude name="**/*TestSuite*.class"/>
				</fileset>
			</batchtest>
		</junit>
	</target>
	
	<!-- Executes all major build targets. -->
	<target name="all" depends="dist, test"/>
	
	<target name="clean" description="Clean up the project tree.">
		<!-- Delete the build and dist directory trees. -->
		<delete dir="build"/>
		<delete dir="dist"/>
		<!-- Delete the doc/api directory tree. -->
		<delete dir="doc/api"/>
	</target>
</project>

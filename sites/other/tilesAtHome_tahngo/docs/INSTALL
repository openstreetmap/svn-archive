PREREQUISITES
-------------

The Tahngo server, as currently tested, requires the following software:

- Python.  (2.4 works)
- Django.  (>0.96. 1.0 beta works)
- Apache.  (2.2 works)
- mod_python.  (3.3 works)

Django needs a database module to store its data in.  If you don't have a preference, sqlite is the simplest to use.  You will need a python module for your database, such as python-mysql or python-sqlite (python-sqlite2 2.3.3 works).

INSTALLATION
------------
- Download the main directory from the OpenStreetMap svn server.  Put it in a location of your choice, eg. /usr/local/share/tah.  The base directory name must be "tah".  The svn download will give you a directory named "tileAtHome_tahngo" by default; change it to "tah".

- The "Tiles" directory should be moved to the place where you want to store all the tileset files. The setting "TILES_ROOT" in settings.py should point to this directory as it will save tileset files here and expect the stock images (blank sea/land/error) here.

- The "media" directory contains files that should be accessible through the web server and should be moved to a place where the files can be served through apache. I think the setting MEDIA_URL in tah.settings needs to point to one directory below "media".

- Move settings.py.example to settings.py and adapt the settings in tah.settings to your configuration (database choice, url handler, etc)

- Run "python manage.py syncdb" to create the database

- Configure your web server for the new paths.  See "Apache Configuration" below.

- In a web browser, go to the /admin interface and add the settings "latest_client_version", "unzipPath","logFile" to the table Settings.
  In the case of tah.osm.org these settings are "2008070500" (just a random string that is parsed by clients), "/tmp", and "/var/log/tah/tahngo.log" respectively.

- in tah_intern/Tile.py some paths are still hardcoded for efficiency reasons. Open that file and adapt the path there too. There is
    basetilepath='/mnt/agami/openstreetmap/tah/Tiles'
    blanktilepath='/var/www/tah/Tiles'
and
    leg_basetiledir='/mnt/agami/openstreetmap/tah/Tiles'
    oceantilesdat_path ='/var/www/tah/Tiles/oceantiles_12.dat'
which needs adapting.

- tah_intern/LegacyTileset.py contains hardcoded paths to your oceantiles.dat file and your fallback legacy tile directories. You shouldn't need this, as Legacy tiles are only on the tah server.

- Configure the html templates for the URL to your tile server.  In the templates directory, base_browse_slippy.html might need adaptation to your tile location.

APACHE CONFIGURATION
--------------------
The following snippet was sufficient in the apache vhost configuration to make it work. If the main apache config cannot be modified it worked to have the stuff in a .htaccess file in the corresponding directories too (NOTE: works only if the config variable AllowOverride in   
Apache is set to something sensible).

	<Location />
		SetHandler python-program
		PythonHandler django.core.handlers.modpython
		SetEnv DJANGO_SETTINGS_MODULE tah.settings
                #adapt next line to whatever your install base directory is
		PythonPath "['/usr/local/share/'] + sys.path"
		#PythonAutoReload Off
		PythonDebug Off
	</Location>
	<Location /media>
		SetHandler None
	</Location>
	<Location /Tiles>
		SetHandler python-program
                #adapt next line to whatever your install base directory is
		PythonPath "['/usr/local/share/'] + sys.path"
		PythonHandler  tah.tah_intern.serve_tiles
		#PythonAutoReload Off
		PythonDebug Off
	</Location>

You can also put these in a subdirectory of your web server by changing the path in the Location lines.

If you have Django in a seperate location (eg. you had to download a new version) you can set the PythonPath to something like:
PythonPath "['/usr/local/share', '/path/to/your/django/installation'] + sys.path" 

(Note: Currently, the actual tile serving only through Apache mod_python or preferably with a compiled module for apache. See mod_tile.c in the directory mod_tah for more on that).  Much of the other parts of the server (admin and browse screens) can be run in a Django standalone server using "python manage.py runserver" for testing purposes.)

USAGE
-----
t@h clients can connect to the server without explicitely creating an account. If clients are configured with their
OpenStreetMap account email (display user name will not work for account creation, but should work as username afterwards, although there is no reason to prefer that to the email) and regular OSM password, the account will be automatically created.
Passwords are cached in a hashed form on the t@h server, so subsequent OpenStreetMap Email or Password changes will not be automatically propagate to the t@h server. In case of a wrong password, the server tries to refetch the password from OpenStreetMap, so password changes (should theoretically) be possible.

In the web admin interface, you will need to add some "layers" for your maps. In t@h these are currently: tile (the default layer from z0-17), captionless (from z0-17; part of the default layers), maplint(transparent; from z12-17; part of the default layers), and caption (transparent; from z0-17).

Processing uploaded tilesets will not happen automatically by the django server this is done in a separate thread. In the directory tah_intern, you need to call "./process_uploads" to unzip the uploads and put the resulting tilesetfiles to their final location. To start and stop this process more conveniently there is Tools/startstop_process_uploads which is a variant of a Debian like /etc/init.d/ script. You need to adapt some paths in here (and create the directory where the .pid file will be saved) and you can then use ./startstop_process_ploads start|stop|restart to start the tile processing. If it already runs, it will not be started again, so I run the startstop script with option "start" every half hour in a cron script to restart it after a reboot (or an unlikely crash).

CRON
----
These are the calls I do via cron:

# m h  dom mon dow   command

#THIS ONE IS IMPORTANT. Reset unfinished tiles and remove finished tiles after 48h
#THIS IS THE ONLY WAY REQUESTS GET DELETED FROM THE REQUEST DB
5 * * * * wget -q -O- http://tah.openstreetmap.org:81/Request/expireTiles/ > /dev/null

# auto-request changed tiles every 6 hours
0 */6 * * * wget -q -O- http://tah.openstreetmap.org:81/Request/create/changedTiles/ > /dev/null

#could restart the processor from time to time, in case something went wrong
#19 */1 * * * /var/www/tah/Tools/startstop_process_uploads restart > /dev/null

#download new oceantiles.dat from time to time
22 22 * * 0 cd /var/www/tah/Tiles;wget http://svn.openstreetmap.org/applications/rendering/tilesAtHome/oceantiles_12.dat -O oceantiles_12.dat.tmp;mv oceantiles_12.dat.tmp oceantiles_12.dat

#auto-stitch lowzoom tiles
30 0 * * * cd /var/www/tah/tah_intern/;TMPDIR=/tmp/ramdisk python stitch_lowzoom.py

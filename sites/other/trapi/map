#!/usr/bin/perl
# Copyright 2008 Blars Blarson.  Distributed under GPL version 2, see GPL-2

use strict;
use warnings;

use constant VERBOSE => 0;		# verbosity

use trapi;
use CGI::Fast qw(:standard);
use CGI::Carp;
use Time::Local;

our $die;

chdir TRAPIDIR or die "could not chdir ".TRAPIDIR.": $!";
$SIG{TERM} = sub {$die = 1};

ptdbinit("<");

my ($ptn, $n, $tn, $lat, $lon, $off, $key, $val, $w, $tw, $tr);

my $oldstamp = "";
my $stamptime = 0;

while (my $query = new CGI::Fast) {
    last if ($die);

    open STAMP, "<", "timestamp" or die "Could not open timestamp: $!";
    my $stamp = <STAMP>;
    close STAMP;
    chomp $stamp;
    if ($stamp ne $oldstamp) {
	my @t = $stamp =~ /^(\d{4})(\d\d)(\d\d)(\d\d)?(\d\d)?/;
	$stamptime = timegm(0, $t[4]//0, $t[3]//0, $t[2], $t[1]-1, $t[0]-1900);
	closeall;
	ptdbinit("<");
	$oldstamp = $stamp;
    }
    if (($stamptime + TOOLD) < time) {
	print $query->header(-status=>('503 stale database '.$stamp));
	next;
    }

    my (%pw, %pn, %pr, %tiles);
    my ($bbs, $bbw, $bbn, $bbe);
    
    if ($query->param('bbox') =~ /^(-?\d+(?:\.\d*)?)\,(-?\d+(?:\.\d*)?)\,(-?\d+(?:\.\d*)?)\,(-?\d+(?:\.\d*)?)$/) {
# print "WSEN: $1, $2, $3, $4\n";
	my ($west,$south) = getTileNumber($2,$1,MAXZOOM);
	my ($east,$north) = getTileNumber($4,$3,MAXZOOM);
# print "WSEN: $west, $south, $east, $north\n";
	my ($x, $y);
	for($y=$north; $y <= $south; $y++) {
	    for($x=$west; $x <= $east; $x++) {
		$tiles{etoptn($x,$y)} = 1;
	    }
	}
	($bbs, $bbw, undef, undef) = Project($west, $south, MAXZOOM);
	(undef, undef, $bbn, $bbe) = Project($east, $north, MAXZOOM);
    } elsif ($query->param('node') =~ /^(\d+)$/) {
	my $node = $1;
	$pn{nodeptn($node)} = {$node => 1};
    } elsif ($query->param('way') =~ /^(\d+)$/) {
	my $way = $1;
	$pw{wayptn($way)} = {$way => 1};
    } elsif ($query->param('relation') =~ /^(\d+)$/) {
	my $rel = $1;
	$pr{relationptn($rel)} = {$rel => 1};
    } elsif ($query->param('tile') =~ /^(\d+),(\d+),(\d+)$/) {
	my ($z,$x,$y) = ($1,$2,$3);
	if ($z >= MAXZOOM) {
	    my $zdiff = $z - MAXZOOM;
	    $x >>= $zdiff;
	    $y >>= $zdiff;
	    $tiles{etoptn($x, $y)} = 1;
	    ($bbs, $bbw, $bbn, $bbe) = Project($x, $y, MAXZOOM);
	} else {
	    ($bbs, $bbw, $bbn, $bbe) = Project($x, $y, $z);
	    my $zdiff = MAXZOOM - $z;
	    $x <<= $zdiff;
	    $y <<= $zdiff;
	    my $n = (1<< $zdiff) - 1;
	    foreach my $xx (0 .. $n) {
		foreach my $yy (0 .. $n) {
		    $tiles{etoptn($x+$xx,$y+$yy)} = 1;
		}
	    }
	}
    } elsif (path_info =~ /node\/(\d+)\b/) {
	my $node = $1;
	$pn{nodeptn($node)} = {$node => 1};
    } elsif (path_info =~ /way\/(\d+)\b/) {
	my $way = $1;
	$pw{wayptn($way)} = {$way => 1};
    } elsif (path_info =~ /relation\/(\d+)\b/) {
	my $rel = $1;
	$pr{relationptn($rel)} = {$rel => 1};
    } else {
	print $query->header(-status=>'400 Unknown/malformed request');
	print path_info;
	next;
    }
    
    if ((scalar keys %tiles) > MAXTILESPERREQ) {
	print $query->header(-status=>"413 Request too large");
	next;
    }
    
    print $query->header(-type=>'text/xml', -charset=>'utf8');
    print "<?xml version='1.0' encoding='UTF-8'?>\n";
    print "<osm version=\"0.5\" generator=\"Trapi 0.2\">\n";
    if (defined $bbs) {
	print "<bound box=\"$bbs,$bbw,$bbn,$bbe\" origin=\"http://www.openstreetmap.org/api/0.5\"/>\n";
    }
    
    foreach $ptn (keys %tiles) {
	my $nd = openptn($ptn, "<", "data");
	my $wf = openptn($ptn, "<", "ways");
	my $rf = openptn($ptn, "<", "relations");
	
# first we go through the ways, looking for ones stored remotely or with nodes
# not in the tile
	seek $wf, 0, 0;
	while (read $wf, $w, 8) {
	    ($tw, $off) = unpack "NN", $w;
	    next unless($tw);
	    if ($off == 0) {
		# way stored remotly
		$w = wayptn($tw);
# print "Remote way $tw\n";
		unless (exists $tiles{$w}) {
		    unless (defined $pw{$w}) {
			$pw{$w} = {};
		    }
		    ${$pw{$w}}{$tw} = 1;
		}
	    } else {
		seek $nd, $off, 0;
		while(read $nd, $n, 4) {
		    ($tn) = unpack "N", $n;
		    last unless ($tn);
		    $n = nodeptn($tn);
		    unless (exists $tiles{$n}) {
			# node stored remotly
			unless (defined $pn{$n}) {
			    $pn{$n} = {};
			}
			${$pn{$n}}{$tn} = 1;
		    }
		}
	    }
	}
	seek $rf, 0, 0;
	while (read $rf, $w, 8) {
	    ($tr, $off) = unpack "NN", $w;
	    next unless($tr);
	    if ($off == 0) {
		my $r = relationptn($tr);
		unless (exists $tiles{$r}) {
		    unless (defined $pr{$r}) {
			$pr{$r} = {};
		    }
		    ${$pr{$r}}{$tr} = 1;
		}
	    }
	}
    }
    
# now we go through the remote ways, looking for nodes and ways not in the tile
    foreach my $tp (keys %pw) {
	my $pwf = openptn($tp, "<", "ways");
	my $pd = openptn($tp, "<", "data");
	seek $pwf, 0, 0;
	while (read $pwf, $w, 8) {
	    ($tw, $off) = unpack "NN", $w;
	    next unless($tw);
	    if (exists ${$pw{$tp}}{$tw}) {
		seek $pd, $off, 0;
		while(read $pd, $n, 4) {
		    ($tn) = unpack "N", $n;
		    last unless ($tn);
		    $n = nodeptn($tn);
		    unless (exists $tiles{$n}) {
			# node stored remotly
			unless (defined $pn{$n}) {
			    $pn{$n} = {};
			}
			${$pn{$n}}{$tn} = 1;
		    }
		}
	    }
	}
    }
    
# print nodes in the tile
    foreach $ptn (keys %tiles) {
	my $nf = openptn($ptn, "<", "nodes");
	my $nd = openptn($ptn, "<", "data");
	
	my ($z, $x, $y) = fromptn($ptn);
	print "<!-- nodes from z$z $x $y -->\n";
	seek $nf, 0, 0;
	while (read $nf, $n, 16) {
	    ($tn, $lat, $lon, $off) = unpack "NN!N!N", $n;
	    next unless($tn);
	    $lat /= CONV;
	    $lon /= CONV;
	    print "<node id=\"$tn\" lat=\"$lat\" lon=\"$lon\" ";
	    if ($off == 0) {
		print "/>\n";
	    } else {
		print ">\n";
		seek $nd, $off, 0;
		while (defined($key = gets $nd) && ($key ne "")) {
		    $val = gets $nd;
		    print "  <tag k=\"$key\" v=\"$val\"/>\n";
		}
		print "</node>\n";
	    }
	}
    }
    
# print the nodes used by ways
    
    foreach my $tp (keys %pn) {
	my ($tz, $tx, $ty) = fromptn($tp);
	print "<!-- some nodes from z$tz $tx $ty -->\n";
	my $pnf = openptn($tp, "<", "nodes");
	my $pd = openptn($tp, "<", "data");
	seek $pnf, 0, 0;
	while(read $pnf, $n, 16) {
	    ($tn, $lat, $lon, $off) = unpack "NN!N!N", $n;
	    next unless($tn);
	    if (exists ${$pn{$tp}}{$tn}) {
		$lat /= 10000000;
		$lon /= 10000000;
		print "<node id=\"$tn\" lat=\"$lat\" lon=\"$lon\" ";
		if ($off == 0) {
		    print "/>\n";
		} else {
		    print ">\n";
		    seek $pd, $off, 0;
		    while (defined($key = gets $pd) && ($key ne "")) {
			$val = gets $pd;
			print "  <tag k=\"$key\" v=\"$val\"/>\n";
		    }
		    print "</node>\n";
		}
	    }
	}
    }
    
# print ways
    foreach $ptn (keys %tiles) {
	my $nd = openptn($ptn, "<", "data");
	my $wf = openptn($ptn, "<", "ways");
	
	my ($z, $x, $y) = fromptn($ptn);
	print "<!-- ways from z$z $x $y -->\n";
	seek $wf, 0, 0;
	while(read $wf, $w, 8) {
	    ($tw, $off) = unpack "NN", $w;
	    next unless ($tw);
	    next unless ($off);
	    print "<way id=\"$tw\">\n";
	    seek $nd, $off, 0;
	    while (read $nd, $w, 4) {
		($tn) = unpack "N", $w;
		last if($tn == 0);
		print "  <nd ref=\"$tn\"/>\n";
	    }
	    while (defined($key = gets $nd) && ($key ne "")) {
		$val = gets $nd;
		print "  <tag k=\"$key\" v=\"$val\"/>\n";
	    }
	    print "</way>\n";
	}
    }
    
    foreach my $tp (keys %pw) {
	my ($tz, $tx, $ty) = fromptn($tp);
	print "<!-- some ways from z$tz $tx $ty -->\n";
	my $pwf = openptn($tp, "<", "ways");
	my $pd = openptn($tp, "<", "data");
	seek $pwf, 0, 0;
	while (read $pwf, $w, 8) {
	    ($tw, $off) = unpack "NN", $w;
	    next unless($tw);
	    if ($off && exists ${$pw{$tp}}{$tw}) {
		print "<way id=\"$tw\">\n";
		seek $pd, $off, 0;
		while(read $pd, $n, 4) {
		    ($tn) = unpack "N", $n;
		    last unless ($tn);
		    print "  <nd ref=\"$tn\"/>\n";
		}
		while (defined($key = gets $pd) && ($key ne "")) {
		    $val = gets $pd;
		    print "  <tag k=\"$key\" v=\"$val\"/>\n";
		}
		print "</way>\n";
	    }
	}
    }
    
# print relations
    
    foreach $ptn (keys %tiles) {
	my $nd = openptn($ptn, "<", "data");
	my $rf = openptn($ptn, "<", "relations");
	
	my ($z, $x, $y) = fromptn($ptn);
	print "<!-- relations from z$z $x $y -->\n";
	seek $rf, 0, 0;
	while (read $rf, $w, 8) {
	    ($tr, $off) = unpack "NN", $w;
	    next unless ($tr);
	    next unless ($off);
	    print "<relation id=\"$tr\">\n";
	    seek $nd, $off, 0;
	    while (read $nd, $w, 5) {
		my ($type, $mid) = unpack "CN", $w;
		last unless ($type);
		my $role = gets($nd);
		print "  <member type=\"".(MEMBERTYPE)[$type]."\" ref=\"$mid\" role=\"$role\"/>\n";
	    }
	    seek $nd, -4, 1;
	    while (defined($key = gets $nd) && ($key ne "")) {
		$val = gets $nd;
		print "  <tag k=\"$key\" v=\"$val\"/>\n";
	    }
	    print "</relation>\n";
	}
    }
    
    foreach my $tp (keys %pr) {
	my ($tz, $tx, $ty) = fromptn($tp);
	print "<!-- some relations from z$tz $tx $ty -->\n";
	my $prf = openptn($tp, "<", "relations");
	my $pd = openptn($tp, "<", "data");
	seek $prf, 0, 0;
	while (read $prf, $w, 8) {
	    ($tr, $off) = unpack "NN", $w;
	    next unless($tr);
	    if ($off && exists ${$pr{$tp}}{$tr}) {
		print "<relation id=\"$tr\">\n";
		seek $pd, $off, 0;
		while (read $pd, $w, 5) {
		    my ($type, $mid) = unpack "CN", $w;
		    last unless ($type);
		    my $role = gets($pd);
		    print "  <member type=\"".(MEMBERTYPE)[$type]."\" ref=\"$mid\" role=\"$role\"/>\n";
		}
		seek $pd, -4, 1;
		my $key;
		while (defined($key = gets $pd) && ($key ne "")) {
		    $val = gets $pd;
		    print "  <tag k=\"$key\" v=\"$val\"/>\n";
		}
		print "</relation>\n";
	    }
	}
    }
    
    print "</osm>\n";
    $| = 1;
    $| = 0;
    last if ($die);
}

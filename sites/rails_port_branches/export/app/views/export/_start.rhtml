<% form_tag :action => 'next' do %>

  <p class="export_heading">Area to Export</p>

  <div class="export_bounds">
    <%= text_field('export', 'maxlat', { :size => 10, :class => "export_bound" }) %>
    <br/>
    <%= text_field('export', 'minlon', { :size => 10, :class => "export_bound" }) %>
    <%= text_field('export', 'maxlon', { :size => 10, :class => "export_bound" }) %>
    <br/>
    <%= text_field('export', 'minlat', { :size => 10, :class => "export_bound" }) %>
  </div>

  <p class="export_heading">Format to Export</p>

  <div class="export_details">
    <%= radio_button('export', 'format', 'osm' ) %>OpenStreetMap XML Data
    <br/>
    <%= radio_button('export', 'format', 'png' ) %>PNG Image
    <br/>
    <%= radio_button('export', 'format', 'pdf' ) %>PDF Document
    <br/>
    <%= radio_button('export', 'format', 'svg' ) %>SVG Document
  </div>

  <div id="export_osm">
    <p class="export_heading">Licence</p>

    <div class="export_details">
      <p>OSM license agreement blah blah blah...</p>
    </div
  </div>

  <div id="export_mapnik">
    <p class="export_heading">Options</p>

    <div class="export_details">
      <p>Scale 1 : <%= text_field('export', 'mapnik_scale', { :size => 10 }) %></p>
    </div>
  </div>

<% end %>

<script type="text/javascript">
  <!--
  var box;

  function startExport() {
    var vectors = new OpenLayers.Layer.Vector("Vector Layer", {
      displayInLayerSwitcher: false,
    });
    map.addLayer(vectors);

    box = new OpenLayers.Control.DrawFeature(vectors, OpenLayers.Handler.RegularPolygon, { 
      handlerOptions: {
        keyMask: OpenLayers.Handler.MOD_CTRL,
        sides: 4,
        snapAngle: 90,
        irregular: true,
        persist: true,
        callbacks: { done: boxComplete }
      }
    });
    map.addControl(box);

    box.activate();

    map.events.register("moveend", map, mapMoved);
    updateRegion(map.getExtent());
  }

  function formatChanged() {
    if ($("export_format_osm").checked) {
      $("export_osm").style.display = "inline";
    } else {
      $("export_osm").style.display = "none";
    }

    if ($("export_format_png").checked ||
        $("export_format_pdf").checked ||
        $("export_format_svg").checked) {
      $("export_mapnik").style.display = "inline";
    } else {
      $("export_mapnik").style.display = "none";
    }
  }

  $("export_format_osm").onclick = function() { formatChanged() };
  $("export_format_png").onclick = function() { formatChanged() };
  $("export_format_pdf").onclick = function() { formatChanged() };
  $("export_format_svg").onclick = function() { formatChanged() };

  function boundsChanged() {
    var epsg4326 = new OpenLayers.Projection("EPSG:4326");
    var bounds = new OpenLayers.Bounds($("export_minlon").value,
                                       $("export_minlat").value,
                                       $("export_maxlon").value,
                                       $("export_maxlat").value);
 
    bounds.transform(epsg4326, map.getProjectionObject());

    map.events.unregister("moveend", map, mapMoved);
    map.zoomToExtent(bounds);

    box.handler.clear();
    box.handler.feature = new OpenLayers.Feature.Vector(bounds.toGeometry());
    box.handler.layer.addFeatures([box.handler.feature], [box.handler.style]);
    box.handler.layer.drawFeature(box.handler.feature, box.handler.style);
  }

  $("export_maxlat").onchange = function() { boundsChanged() };
  $("export_minlon").onchange = function() { boundsChanged() };
  $("export_maxlon").onchange = function() { boundsChanged() };
  $("export_minlat").onchange = function() { boundsChanged() };

  function mapMoved() {
    updateRegion(map.getExtent());
  }

  function boxComplete(box) {
    map.events.unregister("moveend", map, mapMoved);
    updateRegion(box.getBounds());
  }

  function updateRegion(bounds) {
    var epsg4326 = new OpenLayers.Projection("EPSG:4326");
    var decimals = Math.pow(10, Math.floor(map.getZoom() / 3));

    bounds.transform(map.getProjectionObject(), epsg4326);

    $("export_maxlat").value = Math.round(bounds.top * decimals) / decimals;
    $("export_minlon").value = Math.round(bounds.left * decimals) / decimals;
    $("export_maxlon").value = Math.round(bounds.right * decimals) / decimals;
    $("export_minlat").value = Math.round(bounds.bottom * decimals) / decimals;

    if (bounds.getWidth() * bounds.getHeight() > 0.25) {
      $("export_format_osm").disabled = true;
      $("export_format_osm").checked = false;

      formatChanged();
    } else {
      $("export_format_osm").disabled = false;
    }
  }

  startExport();
  // -->
</script>

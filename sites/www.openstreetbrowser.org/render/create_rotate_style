#!/usr/bin/php
<?
$file="overlay_pt.xml";

$dom=new DOMDocument();
$dom->load($file);
 
# Indexing all files in img/
$d=opendir("img/rotate/");
while($r=readdir($d)) {
  if((substr($r, 0, 1)!=".")&&(substr($r, -4)==".png"))
    $img_files[]=$r;
}

$filters=$dom->getElementsByTagName("Filter");
for($i=0; $i<$filters->length; $i++) {
  $filter=$filters->item($i);

  if(eregi("\[(angle|color_).*\] = ([0-9]+)", $filter->nodeValue, $m)) {
    $rule=$filter->parentNode;
    $style=$rule->parentNode;

    $list[]=array($style, $rule, $filter);
  }
}

foreach($list as $process) {
  $style=$process[0];
  $rule=$process[1];
  $filter=$process[2];
  print "* Style '".$style->getAttribute("name")."'\n";
  print "= $filter->nodeValue\n";

  $filter_parts=explode(" and ", $filter->nodeValue);
  $new_filter_parts=array();
  unset($rotate);
  unset($color_replace);
  foreach($filter_parts as $f) {
    if(eregi("not \[(angle.*)\] = ([0-9]*)", $f, $m)) {
    }
    elseif(eregi("\[(angle.*)\] = ([0-9]*)", $f, $m)) {
      $rotate=array($m[1], $m[2]);
    }
    elseif(eregi("(not .*)_color_([0-9A-F]{3,6})_([0-9A-F]{3,6})(.*)", $f, $m)) {
      $new_filter_parts[]="$m[1]$m[4]";
    }
    elseif(eregi("(.*)_color_([0-9A-F]{3,6})_([0-9A-F]{3,6})(.*)", $f, $m)) {
      $new_filter_parts[]="$m[1]$m[4]";
      $color_replace["#$m[2]"]="#$m[3]";
    }
    elseif(eregi("\[color_(.*)\] = 'C([0-9A-F]*)'", $f, $m)) {
    }
    else {
      $new_filter_parts[]=$f;
    }
  }
  $filter->nodeValue=implode(" and ", $new_filter_parts);
  print "= $filter->nodeValue\n";
  if($rotate)
    print "rotate: $rotate[0] $rotate[1]\n";
  if($color_replace) foreach($color_replace as $r=>$c)
    print "color: $r $c\n";

  $point=$rule->getElementsByTagName("PointSymbolizer");
  $point=$point->item(0);
  $orig_file=$point->getAttribute("file");

  $svg=false;
  foreach($img_files as $r) {
    $f=popen("compare -metric mae $orig_file img/rotate/$r /tmp/diff.png 2>&1", "r");
    $comp=fgets($f);
    pclose($f);
    if(substr($comp, 0, 5)=="0 (0)") {
      $orig_file="img/rotate/src/".substr($r, 0, -4).".svg";
      $svg=true;
    }
  }

  if(eregi("^(.*)\.png$", $point->getAttribute("file"), $m))
    $new_file=$m[1];

  print "$orig_file -> $new_file\n";

  if($svg&&$color_replace) {
    $r=file_get_contents($orig_file);
    $r=strtr($r, $color_replace);
    $f=fopen("/tmp/tmp.svg", "w");
    fwrite($f, $r);
    fclose($f);
    $orig_file="/tmp/tmp.svg";
  }


  if($rotate) {
    $varname=$rotate[0];
    $steps=$rotate[1];

    $style->removeChild($rule);

    for($a=0; $a<$steps; $a++) {
      $n=$rule->cloneNode(true);
      
      $f=$n->getElementsByTagName("Filter");
      $f=$f->item(0);
      $f->nodeValue.=" and [$varname] = $a";
      
      $p=$n->getElementsByTagName("PointSymbolizer");
      $p=$p->item(0);
      if($orig_file) {
	$img=sprintf("%s_%02d.png", $new_file, $a);
	system("convert -background none -rotate ".(270+$a/$steps*360)." $orig_file $img");

	$p->setAttribute("file", sprintf($img, $a));
	$size=getimagesize(sprintf($img, $a));
	$p->setAttribute("height", $size[0]);
	$p->setAttribute("width", $size[1]);
      }

      $style->appendChild($n);
    }
  }
  else {
    if($orig_file!="$new_file.png")
      system("convert -background none $orig_file $new_file.png");
  }
}

$dom->save($file);

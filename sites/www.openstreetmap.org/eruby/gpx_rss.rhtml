<%
require 'osm/dao'
require 'rexml/document'
require 'cgi'


cgi = CGI.new

include REXML

begin

  dao = OSM::Dao.instance

  res = dao.gpx_files(true, cgi['display_name'], cgi['tag'], '', cgi['page'].to_i, true)

  rss = Element.new 'rss'
  rss.attributes['version'] = "2.0"
  rss.attributes['xmlns:geo'] = "http://www.w3.org/2003/01/geo/wgs84_pos#"
  channel = Element.new 'channel', rss
  title = Element.new 'title', channel
  title.text =  'OpenStreetMap GPS Traces'
  description_el = Element.new 'description', channel

  description = 'OpenStreetMap GPS Traces'
  description += " for tag #{cgi['tag']}" if cgi['tag'] != ''
  description += " for user #{cgi['display_name']}" if cgi['display_name'] != ''
  
  description_el.text = description
  link = Element.new 'link', channel
  link.text = 'http://www.openstreetmap.org/traces/'

  image = Element.new 'image', channel
  url = Element.new 'url', image
  url.text = "http://www.openstreetmap.org/feeds/mag_map-rss2.0.png"
  title = Element.new 'title', image
  title.text = "OpenStreetMap"
  width = Element.new 'width', image
  width.text = 100
  height = Element.new 'height', image
  height.text = 100
  link = Element.new 'link', image
  link.text = 'http://www.openstreetmap.org/traces/'
 
  res.each_hash do |row|
    item = Element.new 'item', channel
    lat = 0
    lon = 0
    lat = sprintf("%0.10f", row['latitude']) unless row['latitude'].to_i == 0
    lon = sprintf("%0.10f", row['longitude']) unless row ['longitude'].to_i == 0

    title = Element.new 'title', item
    title.text = row['name']
    link = Element.new 'link', item
    link.text = "http://www.openstreetmap.org/traces/user/#{row['display_name']}/#{row['id']}"
   
    description = Element.new 'description', item
    
    description_t = "<img src=\"/traces/user/#{row['display_name']}/#{row['id']}/image-icon.png\" border=\"0\" align=\"left\"> #{row['name']} by #{row['display_name']} (#{row['size']} points)"
    description_t += " in #{row['tags']}" if row['tags'] != ''
    description_t += " Description: #{row['description']}" if row['description'] != ''
    description.text = description_t

    pubDate = Element.new 'pubDate', item
    pubDate.text = Time.parse(row["timestamp"])

    lat_el = Element.new 'geo:lat', item
    lat_el.text = lat
    lon_el = Element.new 'geo:lon', item
    lon_el.text = lon
  end

  puts rss.to_s


rescue MysqlError => e
  print "Error code: ", e.errno, "\n"
  print "Error message: ", e.error, "\n"

end
%>
